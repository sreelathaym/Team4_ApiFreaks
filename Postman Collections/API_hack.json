{
	"info": {
		"_postman_id": "e90aca48-5c27-40ef-8616-d3c6ee42c6d2",
		"name": "Team4_ApiFreaks",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "N-Admin_login-With_invalid_Endpoint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2c256c48-b616-477b-8963-e781ebbfc6ac",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2b7df9a3-e7e9-4f19-bf3d-e5b4dc8ba100",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									" \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ba858357-5a7b-4527-a310-ee32a3f2f43b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"{{AdminPsw}}\",\r\n    \"userLoginEmail\": \"{{AdminEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/olg"
					},
					"response": [
						{
							"id": "a8330e58-448f-44c9-a8b2-77c60a844d1a",
							"name": "N-Admin_login-With_invalid_Endpoint",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"{{AdminPsw}}\",\r\n    \"userLoginEmail\": \"{{AdminEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{base_URL}}/olg"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722839449&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=MYwwkOFQOOZ6mfdc61zcmLJxjTNz%2FqOnVR68sKTT0Pg%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722839449&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=MYwwkOFQOOZ6mfdc61zcmLJxjTNz%2FqOnVR68sKTT0Pg%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 05 Aug 2024 06:30:49 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"timestamp\": \"2024-08-05T06:30:49.166+00:00\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"path\": \"/dietician/olg\"\n}"
						}
					]
				},
				{
					"name": "N-Admin_login_With_Invalid_Cred",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52cafd25-3233-4977-a96c-701be6d3eeda",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "faf6b330-a2b8-41da-9d78-402bbf7e225f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"abcd123\",\r\n    \"userLoginEmail\": \"xyz456@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/login"
					},
					"response": []
				},
				{
					"name": "Admin_login_With_valid_Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0f80eff-ad62-4f09-b844-d07c880a9f8b",
								"exec": [
									"var resp = pm.response.json();\r",
									"pm.collectionVariables.set(\"Admin_Token\", resp.token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"loginUserEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"token\",\r",
									"    \"type\",\r",
									"    \"userId\",\r",
									"    \"loginUserEmail\",\r",
									"    \"roles\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response contsins valid schema data\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0bef3515-1090-4a87-89ac-688545fca8f2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"{{AdminPsw}}\",\r\n    \"userLoginEmail\": \"{{AdminEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/login"
					},
					"response": []
				},
				{
					"name": "N-CreateDieticianInvalidendpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4ca442d-8e35-488a-8175-1537189fce0d",
								"exec": [
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"// pm.test(\"Status code\", function () {\r",
									"  \r",
									"//     pm.expect(pm.response.status).to.eql(pm.iterationData['statuscode'])\r",
									"// });\r",
									"\r",
									"pm.test(\"Status code\", function () {\r",
									"    pm.response.to.have.status(pm.collectionVariables.get(\"statuscode\"));\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"dieticianId\",jsonData.id);\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"dieticianPsw\",jsonData.loginPassword);\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"dieticianEmail\",jsonData.Email);\r",
									"\r",
									"//validate mandatory fields are not empty\r",
									"pm.test(\"First name is not empty\", function () {\r",
									"    pm.expect(jsonData.Firstname).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"Last name is not empty\", function () {\r",
									"    pm.expect(jsonData.Lastname).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"Email is not empty\",function(){\r",
									"    pm.expect(jsonData.Email).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"ContactNumber is not empty\",function(){\r",
									"    pm.expect(jsonData.ContactNumber).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"DateOfBirth is not empty\",function(){\r",
									"    pm.expect(jsonData.DateOfBirth).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"Hospital name is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalName).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"HospitalStreet is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalStreet).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"City is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalCity).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"PinCode is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalPinCode).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"Education is not empty\",function(){\r",
									"    pm.expect(jsonData.Education).to.be.not.empty;\r",
									"});\r",
									"  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5b4459cc-18af-4817-b3fa-cb0d2835621f",
								"exec": [
									"// pm.collectionVariables.set(\"statuscode\", pm.iterationData.get('statuscode'));\r",
									"// let statuscode1 = pm.collectionVariables.get(\"statuscode\");\r",
									"// console.log(statuscode1);\r",
									"\r",
									"// if (pm.iterationData.get(\"Request\") !== 'CreateRequest') {\r",
									"//     pm.execution.skipRequest();\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c2f26dfe-3e03-4d37-a515-216bc0d53efb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"{{contactnumber}}\",\r\n  \"DateOfBirth\": \"{{Dateofbirth}}\",\r\n  \"Education\": \"{{education}}\",\r\n  \"Email\": \"{{email}}\",\r\n  \"Firstname\": \"{{firstname}}\",\r\n  \"HospitalCity\":\" {{hospitalcity}}\",\r\n  \"HospitalName\": \"{{hospitalname}}\",\r\n  \"HospitalPincode\": \"{{hospitalpincode}}\",\r\n  \"HospitalStreet\":\"{{hospitalstreet}}\",\r\n  \"Lastname\": \"{{lastname}}\"\r\n\r\n}\r\n\r\n// {\r\n//   \"ContactNumber\": \"7678687675\",\r\n//   \"DateOfBirth\": \"1985-06-21T00:00:00.000+00:00\",\r\n//   \"Education\": \"edu1\",\r\n//   \"Email\": \"vidhya@gmail.com\",\r\n//   \"Firstname\": \"Sri\",\r\n//   \"HospitalCity\": \"hoscit\",\r\n//   \"HospitalName\": \"hosnam\",\r\n//   \"HospitalPincode\": \"896879\",\r\n//   \"HospitalStreet\": \"hosstr\",\r\n//   \"Lastname\": \"vidhya\"\r\n\r\n// }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/dieticianinv"
					},
					"response": []
				},
				{
					"name": "N-CreateDieticianNoAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4ca442d-8e35-488a-8175-1537189fce0d",
								"exec": [
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"// pm.test(\"Status code\", function () {\r",
									"  \r",
									"//     pm.expect(pm.response.status).to.eql(pm.iterationData['statuscode'])\r",
									"// });\r",
									"\r",
									"pm.test(\"Status code\", function () {\r",
									"    pm.response.to.have.status(pm.collectionVariables.get(\"statuscode\"));\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"dieticianId\",jsonData.id);\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"dieticianPsw\",jsonData.loginPassword);\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"dieticianEmail\",jsonData.Email);\r",
									"\r",
									"//validate mandatory fields are not empty\r",
									"pm.test(\"First name is not empty\", function () {\r",
									"    pm.expect(jsonData.Firstname).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"Last name is not empty\", function () {\r",
									"    pm.expect(jsonData.Lastname).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"Email is not empty\",function(){\r",
									"    pm.expect(jsonData.Email).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"ContactNumber is not empty\",function(){\r",
									"    pm.expect(jsonData.ContactNumber).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"DateOfBirth is not empty\",function(){\r",
									"    pm.expect(jsonData.DateOfBirth).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"Hospital name is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalName).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"HospitalStreet is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalStreet).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"City is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalCity).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"PinCode is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalPinCode).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"Education is not empty\",function(){\r",
									"    pm.expect(jsonData.Education).to.be.not.empty;\r",
									"});\r",
									"  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5b4459cc-18af-4817-b3fa-cb0d2835621f",
								"exec": [
									"// pm.collectionVariables.set(\"statuscode\", pm.iterationData.get('statuscode'));\r",
									"// let statuscode1 = pm.collectionVariables.get(\"statuscode\");\r",
									"// console.log(statuscode1);\r",
									"\r",
									"// if (pm.iterationData.get(\"Request\") !== 'CreateRequest') {\r",
									"//     pm.execution.skipRequest();\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f7db1bf5-e556-4117-a945-575ea79b3608",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"{{contactnumber}}\",\r\n  \"DateOfBirth\": \"{{Dateofbirth}}\",\r\n  \"Education\": \"{{education}}\",\r\n  \"Email\": \"{{email}}\",\r\n  \"Firstname\": \"{{firstname}}\",\r\n  \"HospitalCity\":\" {{hospitalcity}}\",\r\n  \"HospitalName\": \"{{hospitalname}}\",\r\n  \"HospitalPincode\": \"{{hospitalpincode}}\",\r\n  \"HospitalStreet\":\"{{hospitalstreet}}\",\r\n  \"Lastname\": \"{{lastname}}\"\r\n\r\n}\r\n\r\n// {\r\n//   \"ContactNumber\": \"7678687675\",\r\n//   \"DateOfBirth\": \"1985-06-21T00:00:00.000+00:00\",\r\n//   \"Education\": \"edu1\",\r\n//   \"Email\": \"vidhya@gmail.com\",\r\n//   \"Firstname\": \"Sri\",\r\n//   \"HospitalCity\": \"hoscit\",\r\n//   \"HospitalName\": \"hosnam\",\r\n//   \"HospitalPincode\": \"896879\",\r\n//   \"HospitalStreet\": \"hosstr\",\r\n//   \"Lastname\": \"vidhya\"\r\n\r\n// }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/dietician"
					},
					"response": []
				},
				{
					"name": "N-CreateDieticianInvalidbaseurl",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4ca442d-8e35-488a-8175-1537189fce0d",
								"exec": [
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"// pm.test(\"Status code\", function () {\r",
									"  \r",
									"//     pm.expect(pm.response.status).to.eql(pm.iterationData['statuscode'])\r",
									"// });\r",
									"\r",
									"pm.test(\"Status code\", function () {\r",
									"    pm.response.to.have.status(pm.collectionVariables.get(\"statuscode\"));\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"dieticianId\",jsonData.id);\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"dieticianPsw\",jsonData.loginPassword);\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"dieticianEmail\",jsonData.Email);\r",
									"\r",
									"//validate mandatory fields are not empty\r",
									"pm.test(\"First name is not empty\", function () {\r",
									"    pm.expect(jsonData.Firstname).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"Last name is not empty\", function () {\r",
									"    pm.expect(jsonData.Lastname).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"Email is not empty\",function(){\r",
									"    pm.expect(jsonData.Email).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"ContactNumber is not empty\",function(){\r",
									"    pm.expect(jsonData.ContactNumber).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"DateOfBirth is not empty\",function(){\r",
									"    pm.expect(jsonData.DateOfBirth).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"Hospital name is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalName).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"HospitalStreet is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalStreet).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"City is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalCity).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"PinCode is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalPinCode).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"Education is not empty\",function(){\r",
									"    pm.expect(jsonData.Education).to.be.not.empty;\r",
									"});\r",
									"  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5b4459cc-18af-4817-b3fa-cb0d2835621f",
								"exec": [
									"// pm.collectionVariables.set(\"statuscode\", pm.iterationData.get('statuscode'));\r",
									"// let statuscode1 = pm.collectionVariables.get(\"statuscode\");\r",
									"// console.log(statuscode1);\r",
									"\r",
									"// if (pm.iterationData.get(\"Request\") !== 'CreateRequest') {\r",
									"//     pm.execution.skipRequest();\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4da39381-034b-4212-b872-2712e96a898d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"{{contactnumber}}\",\r\n  \"DateOfBirth\": \"{{Dateofbirth}}\",\r\n  \"Education\": \"{{education}}\",\r\n  \"Email\": \"{{email}}\",\r\n  \"Firstname\": \"{{firstname}}\",\r\n  \"HospitalCity\":\" {{hospitalcity}}\",\r\n  \"HospitalName\": \"{{hospitalname}}\",\r\n  \"HospitalPincode\": \"{{hospitalpincode}}\",\r\n  \"HospitalStreet\":\"{{hospitalstreet}}\",\r\n  \"Lastname\": \"{{lastname}}\"\r\n\r\n}\r\n\r\n// {\r\n//   \"ContactNumber\": \"7678687675\",\r\n//   \"DateOfBirth\": \"1985-06-21T00:00:00.000+00:00\",\r\n//   \"Education\": \"edu1\",\r\n//   \"Email\": \"vidhya@gmail.com\",\r\n//   \"Firstname\": \"Sri\",\r\n//   \"HospitalCity\": \"hoscit\",\r\n//   \"HospitalName\": \"hosnam\",\r\n//   \"HospitalPincode\": \"896879\",\r\n//   \"HospitalStreet\": \"hosstr\",\r\n//   \"Lastname\": \"vidhya\"\r\n\r\n// }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://dietician-20-api-hackathon-80f2590665cc.herokuapp.com/dietician"
					},
					"response": []
				},
				{
					"name": "CreateDietician",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4ca442d-8e35-488a-8175-1537189fce0d",
								"exec": [
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"// pm.test(\"Status code\", function () {\r",
									"  \r",
									"//     pm.expect(pm.response.status).to.eql(pm.iterationData['statuscode'])\r",
									"// });\r",
									"\r",
									"pm.test(\"Status code\", function () {\r",
									"    pm.response.to.have.status(pm.collectionVariables.get(\"Dieiticanstatuscode\"));\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"dieticianId\",jsonData.id);\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"dieticianPsw\",jsonData.loginPassword);\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"dieticianEmail\",jsonData.Email);\r",
									"\r",
									"//validate mandatory fields are not empty\r",
									"pm.test(\"First name is not empty\", function () {\r",
									"    pm.expect(jsonData.Firstname).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"Last name is not empty\", function () {\r",
									"    pm.expect(jsonData.Lastname).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"Email is not empty\",function(){\r",
									"    pm.expect(jsonData.Email).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"ContactNumber is not empty\",function(){\r",
									"    pm.expect(jsonData.ContactNumber).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"DateOfBirth is not empty\",function(){\r",
									"    pm.expect(jsonData.DateOfBirth).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"Hospital name is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalName).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"HospitalStreet is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalStreet).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"City is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalCity).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"PinCode is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalPinCode).to.be.not.null;\r",
									"});\r",
									"pm.test(\"Education is not empty\",function(){\r",
									"    pm.expect(jsonData.Education).to.be.not.empty;\r",
									"});\r",
									"  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5b4459cc-18af-4817-b3fa-cb0d2835621f",
								"exec": [
									"// pm.collectionVariables.set(\"statuscode\", pm.iterationData.get('statuscode'));\r",
									"// let statuscode1 = pm.collectionVariables.get(\"statuscode\");\r",
									"// console.log(statuscode1);\r",
									"\r",
									"// if (pm.iterationData.get(\"Request\") !== 'CreateRequest') {\r",
									"//     pm.execution.skipRequest();\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ad2cf518-7360-4663-ba0b-ac52644227cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\r\n//   \"ContactNumber\": \"{{contactnumber}}\",\r\n//   \"DateOfBirth\": \"{{Dateofbirth}}\",\r\n//   \"Education\": \"{{education}}\",\r\n//   \"Email\": \"{{email}}\",\r\n//   \"Firstname\": \"{{firstname}}\",\r\n//   \"HospitalCity\":\" {{hospitalcity}}\",\r\n//   \"HospitalName\": \"{{hospitalname}}\",\r\n//   \"HospitalPincode\": \"{{hospitalpincode}}\",\r\n//   \"HospitalStreet\":\"{{hospitalstreet}}\",\r\n//   \"Lastname\": \"{{lastname}}\"\r\n\r\n// }\r\n\r\n{\r\n  \"ContactNumber\": \"7678687678\",\r\n  \"DateOfBirth\": \"1985-06-21T00:00:00.000+00:00\",\r\n  \"Education\": \"edu1\",\r\n  \"Email\": \"vidhya1@gmail.com\",\r\n  \"Firstname\": \"Sri\",\r\n  \"HospitalCity\": \"hoscit\",\r\n  \"HospitalName\": \"hosnam\",\r\n  \"HospitalPincode\": \"600044\",\r\n  \"HospitalStreet\": \"hosstr\",\r\n  \"Lastname\": \"vidhya\"\r\n\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/dietician"
					},
					"response": []
				},
				{
					"name": "N-Get_all_Dietician_Inval_Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07498148-ce77-40ca-8cef-60d284aebc04",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c74a4707-0a10-4766-b86d-644609f64c5e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/dietician123"
					},
					"response": [
						{
							"id": "db031f72-062a-421d-9710-2988c4c7a677",
							"name": "N-Get_all_Dietician_Inval_Endpoint",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_URL}}/dietician123"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722839467&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=CcEyKgxHbaijrLz8%2F1t%2FJXfMt91rASbBRc8CxE0EUP8%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722839467&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=CcEyKgxHbaijrLz8%2F1t%2FJXfMt91rASbBRc8CxE0EUP8%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 05 Aug 2024 06:31:07 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"timestamp\": \"2024-08-05T06:31:07.708+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/dietician/dietician123\"\n}"
						}
					]
				},
				{
					"name": "N-Get_all_Dietician_Invalid_BaseURl",
					"id": "9cbf65f6-4a6b-4fab-8a5d-0d40c0fa6faa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "https://dietician1-dec1-api-hackathon-80f2590665cc.herokuapp.com/dietician/dietician"
					},
					"response": []
				},
				{
					"name": "N-Get_all_Dietician_NoAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1054b8cb-313c-4083-a013-21a19355efff",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a159f603-de53-4533-8873-e86f74571d8f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/dietician"
					},
					"response": [
						{
							"id": "985e6d8f-d8f5-438d-8567-f46861648c31",
							"name": "GetallDieticianNoAuth",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_URL}}/dietician"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722839567&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=sYMkWPFfi5JSKenigCNJ4L%2BjgvkDafZVFKT9ru0YU7U%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722839567&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=sYMkWPFfi5JSKenigCNJ4L%2BjgvkDafZVFKT9ru0YU7U%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 05 Aug 2024 06:32:47 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"timestamp\": \"2024-08-05T06:32:47.465+00:00\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"path\": \"/dietician/dietician\"\n}"
						}
					]
				},
				{
					"name": "GetallDietcianinfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f5152cc-c416-4357-b128-e61b9666bb92",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"Firstname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"Lastname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ContactNumber\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"DateOfBirth\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"Email\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"Firstname\",\r",
									"        \"Lastname\",\r",
									"        \"ContactNumber\",\r",
									"        \"DateOfBirth\",\r",
									"        \"Email\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"Firstname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"Lastname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ContactNumber\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"DateOfBirth\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"Email\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"HospitalName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"HospitalStreet\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"HospitalCity\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"HospitalPincode\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"Education\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"Firstname\",\r",
									"        \"Lastname\",\r",
									"        \"ContactNumber\",\r",
									"        \"DateOfBirth\",\r",
									"        \"Email\",\r",
									"        \"HospitalName\",\r",
									"        \"HospitalStreet\",\r",
									"        \"HospitalCity\",\r",
									"        \"HospitalPincode\",\r",
									"        \"Education\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response contains valid schema data\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a15bb1e6-62dd-4424-8a23-a00136223659",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/dietician"
					},
					"response": []
				},
				{
					"name": "N-UpdateDieticianNoAuth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0bc97771-a44d-41e6-8223-3230175e1671",
								"exec": [
									"pm.collectionVariables.set(\"statuscode\", pm.iterationData.get('statuscode'));\r",
									"let statuscode1 = pm.collectionVariables.get(\"statuscode\");\r",
									"console.log(statuscode1);\r",
									"\r",
									"if (pm.iterationData.get(\"Request\") !== 'UpdateRequest') {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9930ae85-9889-442f-8edf-db5e33873f0f",
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Status code\", function () {\r",
									"    pm.response.to.have.status(pm.collectionVariables.get(\"statuscode\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "38064c8e-25e3-4589-8cea-8462b63c026c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"id\": \"{{dieticianid}}\",\r\n  \"ContactNumber\": \"{{contactnumber}}\",\r\n  \"DateOfBirth\": \"{{Dateofbirth}}\",\r\n  \"Education\": \"{{education}}\",\r\n  \"Email\": \"{{email}}\",\r\n  \"Firstname\": \"{{firstname}}\",\r\n  \"HospitalCity\":\" {{hospitalcity}}\",\r\n  \"HospitalName\": \"{{hospitalname}}\",\r\n  \"HospitalPincode\": \"{{hospitalpincode}}\",\r\n  \"HospitalStreet\":\"{{hospitalstreet}}\",\r\n  \"Lastname\": \"{{lastname}}\"\r\n \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/dietician/{{dieticianid}}"
					},
					"response": []
				},
				{
					"name": "N-UpdateDieticianwithinvalidbaseurl",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0bc97771-a44d-41e6-8223-3230175e1671",
								"exec": [
									"pm.collectionVariables.set(\"statuscode\", pm.iterationData.get('statuscode'));\r",
									"let statuscode1 = pm.collectionVariables.get(\"statuscode\");\r",
									"console.log(statuscode1);\r",
									"\r",
									"if (pm.iterationData.get(\"Request\") !== 'UpdateRequest') {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9930ae85-9889-442f-8edf-db5e33873f0f",
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Status code\", function () {\r",
									"    pm.response.to.have.status(pm.collectionVariables.get(\"statuscode\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fb4926c6-bd76-49b0-96e4-f6ff7a0a6d08",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"id\": \"{{dieticianid}}\",\r\n  \"ContactNumber\": \"{{contactnumber}}\",\r\n  \"DateOfBirth\": \"{{Dateofbirth}}\",\r\n  \"Education\": \"{{education}}\",\r\n  \"Email\": \"{{email}}\",\r\n  \"Firstname\": \"{{firstname}}\",\r\n  \"HospitalCity\":\" {{hospitalcity}}\",\r\n  \"HospitalName\": \"{{hospitalname}}\",\r\n  \"HospitalPincode\": \"{{hospitalpincode}}\",\r\n  \"HospitalStreet\":\"{{hospitalstreet}}\",\r\n  \"Lastname\": \"{{lastname}}\"\r\n \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://dietician-20-api-hackathon-80f2590665cc.herokuapp.com/dietician2/dietician/{{dieticianid}}"
					},
					"response": []
				},
				{
					"name": "N-UpdateDieticianwithinvalidEndpoint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0bc97771-a44d-41e6-8223-3230175e1671",
								"exec": [
									"pm.collectionVariables.set(\"statuscode\", pm.iterationData.get('statuscode'));\r",
									"let statuscode1 = pm.collectionVariables.get(\"statuscode\");\r",
									"console.log(statuscode1);\r",
									"\r",
									"if (pm.iterationData.get(\"Request\") !== 'UpdateRequest') {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9930ae85-9889-442f-8edf-db5e33873f0f",
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Status code\", function () {\r",
									"    pm.response.to.have.status(pm.collectionVariables.get(\"statuscode\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c7d5cfb8-d104-45ce-b27f-544b179b315e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"id\": \"{{dieticianid}}\",\r\n  \"ContactNumber\": \"{{contactnumber}}\",\r\n  \"DateOfBirth\": \"{{Dateofbirth}}\",\r\n  \"Education\": \"{{education}}\",\r\n  \"Email\": \"{{email}}\",\r\n  \"Firstname\": \"{{firstname}}\",\r\n  \"HospitalCity\":\" {{hospitalcity}}\",\r\n  \"HospitalName\": \"{{hospitalname}}\",\r\n  \"HospitalPincode\": \"{{hospitalpincode}}\",\r\n  \"HospitalStreet\":\"{{hospitalstreet}}\",\r\n  \"Lastname\": \"{{lastname}}\"\r\n \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/dietician/{{dieticianid}}/"
					},
					"response": []
				},
				{
					"name": "UpdateDietician",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0bc97771-a44d-41e6-8223-3230175e1671",
								"exec": [
									"pm.collectionVariables.set(\"statuscode\", pm.iterationData.get('statuscode'));\r",
									"let statuscode1 = pm.collectionVariables.get(\"statuscode\");\r",
									"console.log(statuscode1);\r",
									"\r",
									"if (pm.iterationData.get(\"Request\") !== 'UpdateRequest') {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9930ae85-9889-442f-8edf-db5e33873f0f",
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Status code\", function () {\r",
									"    pm.response.to.have.status(pm.collectionVariables.get(\"Dieiticanstatuscode\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9b87989e-9e5b-4f6e-be96-0b349666d6f0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"id\": \"{{dieticianid}}\",\r\n  \"ContactNumber\": \"{{contactnumber}}\",\r\n  \"DateOfBirth\": \"{{Dateofbirth}}\",\r\n  \"Education\": \"{{education}}\",\r\n  \"Email\": \"{{email}}\",\r\n  \"Firstname\": \"{{firstname}}\",\r\n  \"HospitalCity\":\" {{hospitalcity}}\",\r\n  \"HospitalName\": \"{{hospitalname}}\",\r\n  \"HospitalPincode\": \"{{hospitalpincode}}\",\r\n  \"HospitalStreet\":\"{{hospitalstreet}}\",\r\n  \"Lastname\": \"{{lastname}}\"\r\n \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/dietician/{{dieticianid}}"
					},
					"response": []
				},
				{
					"name": "N-Get_Dietician_By_InvalidID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83c8206e-f250-4a95-a356-9ce10c6c7e4a",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "aa736f16-7931-45df-8ae6-972c68420573",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/dietician/{abcd}"
					},
					"response": []
				},
				{
					"name": "N-Get_Dietician_By_Invalid_Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a837a64-291c-460c-a31c-a29375e2d496",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "27710a1c-a9b6-4fdd-b37a-c1edf66309e6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/{{dieticianId}}"
					},
					"response": [
						{
							"id": "e7e0fd8a-d705-49e1-84f6-1e5e2c55b207",
							"name": "N-Get_Dietician_By_Invalid_Endpoint",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_URL}}/{{dieticianId}}"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722841041&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8rHCD6eom8hF30AhAWIRbyZ0znZrSLtDCB%2FlB6BRenc%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722841041&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=8rHCD6eom8hF30AhAWIRbyZ0znZrSLtDCB%2FlB6BRenc%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 05 Aug 2024 06:57:21 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"timestamp\": \"2024-08-05T06:57:21.325+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/dietician/750\"\n}"
						}
					]
				},
				{
					"name": "GetDieticianByNoAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1654ebf-3889-49d1-a8f5-3b09368afd04",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fb268134-25d5-4a18-a8ba-cbfdbb035ac9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/dietician/{{dieticianId}}"
					},
					"response": [
						{
							"id": "815d8505-014c-4b87-b681-c922f2b4b3bf",
							"name": "GetDieticianByNoAuth",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_URL}}/dietician/{{dieticianId}}"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722840408&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cAwZhj3A%2F56o8ZlpVmOsvH1SKkgj%2FgHCffUY49%2BtM2U%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722840408&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cAwZhj3A%2F56o8ZlpVmOsvH1SKkgj%2FgHCffUY49%2BtM2U%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 05 Aug 2024 06:46:48 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"timestamp\": \"2024-08-05T06:46:48.727+00:00\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"path\": \"/dietician/dietician/null\"\n}"
						}
					]
				},
				{
					"name": "Get_Dietcian_infoBy_ValidID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "788fbcac-15be-493b-a37c-6ba5611fac5b",
								"exec": [
									"// Updated assertion to compare response value as a string\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"const schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Firstname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Lastname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ContactNumber\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"DateOfBirth\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"HospitalName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"HospitalStreet\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"HospitalCity\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"HospitalPincode\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Education\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"Firstname\",\r",
									"    \"Lastname\",\r",
									"    \"ContactNumber\",\r",
									"    \"DateOfBirth\",\r",
									"    \"Email\",\r",
									"    \"HospitalName\",\r",
									"    \"HospitalStreet\",\r",
									"    \"HospitalCity\",\r",
									"    \"HospitalPincode\",\r",
									"    \"Education\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response contains valid schema data\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fe8f79f1-f33d-4768-a435-040f23a6caa0",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "61a7ed2e-cae8-414d-9106-686a1269daa3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/dietician/{{dieticianId}}"
					},
					"response": []
				}
			],
			"id": "8743a1e3-504f-4e46-b409-678331ee8f67"
		},
		{
			"name": "Dietician",
			"item": [
				{
					"name": "Dietician_login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0f80eff-ad62-4f09-b844-d07c880a9f8b",
								"exec": [
									"let resp = pm.response.json();\r",
									"pm.collectionVariables.set(\"Dietician_Token\", resp.token);pm.test(\"Status code is 200\", function () {\r",
									"    pm.resp.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"loginUserEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"token\",\r",
									"    \"type\",\r",
									"    \"userId\",\r",
									"    \"loginUserEmail\",\r",
									"    \"roles\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response contsins valid schema data\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6237db0f-0e85-4bd1-b186-f4b323ed46cf",
								"exec": [
									"// if (pm.info.iteration !== 0) { \r",
									"//       pm.execution.skipRequest();\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "60bf1bf0-7a9e-48ae-b06e-71b18465a256",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"{{dieticianPsw}}\",\r\n    \"userLoginEmail\": \"{{dieticianEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/login"
					},
					"response": []
				},
				{
					"name": "N_GetAllPatients_Invalid_endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d45c3c7d-9141-406a-bab4-56d11c829c3d",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c83f1170-1766-40fe-a1b1-29e04d848bcf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/patient1"
					},
					"response": [
						{
							"id": "dc99201f-1832-4323-917a-d12e78c4c895",
							"name": "GetAllPatients",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_URL}}/patient"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722658260&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=XeVGK79cmbhC0rPJ%2Fpt9TNzVXVeLOy60cKuH%2FFX%2FLOg%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722658260&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=XeVGK79cmbhC0rPJ%2Fpt9TNzVXVeLOy60cKuH%2FFX%2FLOg%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 04:11:00 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n    {\n        \"patientId\": 468,\n        \"FirstName\": \"h\",\n        \"LastName\": \"d\",\n        \"ContactNumber\": \"1000000000\",\n        \"Email\": \"S124@acbd.com\",\n        \"Allergy\": \"Soy\",\n        \"FoodPreference\": \"jain\",\n        \"CuisineCategory\": \"Indian\",\n        \"FileMorbidity\": {\n            \"66ada9f04717cf471aaad20c\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            }\n        },\n        \"FileMorbidityCondition\": {\n            \"66ada9f04717cf471aaad20c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n        },\n        \"DateOfBirth\": \"1988-07-08\",\n        \"DieticianId\": 871,\n        \"Vitals\": {\n            \"66ada9f04717cf471aaad20c\": {\n                \"Weight\": 0,\n                \"Height\": 0,\n                \"Temperature\": 0,\n                \"SP\": 0,\n                \"DP\": 0\n            }\n        },\n        \"LastVisitDate\": \"2024-08-03T03:54:24.117+00:00\"\n    }\n]"
						}
					]
				},
				{
					"name": "N_GetAllPatients_without_Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10cbe64c-344e-4818-9988-bd7a8ef0a46b",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c13043e3-377f-4ab2-9420-163b87360dfb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/patient"
					},
					"response": [
						{
							"id": "feaab1c3-d0fc-48d1-b394-86d6664246ad",
							"name": "GetAllPatients",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_URL}}/patient"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722658260&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=XeVGK79cmbhC0rPJ%2Fpt9TNzVXVeLOy60cKuH%2FFX%2FLOg%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722658260&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=XeVGK79cmbhC0rPJ%2Fpt9TNzVXVeLOy60cKuH%2FFX%2FLOg%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 04:11:00 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n    {\n        \"patientId\": 468,\n        \"FirstName\": \"h\",\n        \"LastName\": \"d\",\n        \"ContactNumber\": \"1000000000\",\n        \"Email\": \"S124@acbd.com\",\n        \"Allergy\": \"Soy\",\n        \"FoodPreference\": \"jain\",\n        \"CuisineCategory\": \"Indian\",\n        \"FileMorbidity\": {\n            \"66ada9f04717cf471aaad20c\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            }\n        },\n        \"FileMorbidityCondition\": {\n            \"66ada9f04717cf471aaad20c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n        },\n        \"DateOfBirth\": \"1988-07-08\",\n        \"DieticianId\": 871,\n        \"Vitals\": {\n            \"66ada9f04717cf471aaad20c\": {\n                \"Weight\": 0,\n                \"Height\": 0,\n                \"Temperature\": 0,\n                \"SP\": 0,\n                \"DP\": 0\n            }\n        },\n        \"LastVisitDate\": \"2024-08-03T03:54:24.117+00:00\"\n    }\n]"
						}
					]
				},
				{
					"name": "GetAllPatients",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "236a4724-1b09-45be-b81c-61b68ac3a2c6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Check if the response time is less than 500ms",
									"// pm.test(\"Response time is less than 500ms\", function () {",
									"//     pm.expect(pm.response.responseTime).to.be.below(500);",
									"// });",
									"// var schema={",
									"  ",
									"//   \"type\": \"object\",",
									"//   \"properties\": {",
									"//     \"patientId\": {",
									"//       \"type\": \"number\"",
									"//     },",
									"//     \"FirstName\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"LastName\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"ContactNumber\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"Email\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"Allergy\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"FoodPreference\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"CuisineCategory\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"DateOfBirth\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"DieticianId\": {",
									"//       \"type\": \"number\"",
									"//     }",
									"//   },",
									"//   \"required\": [",
									"//     \"patientId\",",
									"//     \"FirstName\",",
									"//     \"LastName\",",
									"//     \"ContactNumber\",",
									"//     \"Email\",",
									"//     \"Allergy\",",
									"//     \"FoodPreference\",",
									"//     \"CuisineCategory\",",
									"//     \"DateOfBirth\",",
									"//     \"DieticianId\"",
									"//   ]",
									"// }",
									"// pm.test(\"Response contsins valid schema data\", function () {",
									"//     pm.response.to.have.jsonSchema(schema);",
									"// });",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1e566add-363e-4c3a-83f3-53aed026f73f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/patient"
					},
					"response": [
						{
							"id": "caf3816f-800f-44e6-853e-f263a509a459",
							"name": "GetAllPatients",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_URL}}/patient"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722658260&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=XeVGK79cmbhC0rPJ%2Fpt9TNzVXVeLOy60cKuH%2FFX%2FLOg%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722658260&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=XeVGK79cmbhC0rPJ%2Fpt9TNzVXVeLOy60cKuH%2FFX%2FLOg%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 04:11:00 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n    {\n        \"patientId\": 468,\n        \"FirstName\": \"h\",\n        \"LastName\": \"d\",\n        \"ContactNumber\": \"1000000000\",\n        \"Email\": \"S124@acbd.com\",\n        \"Allergy\": \"Soy\",\n        \"FoodPreference\": \"jain\",\n        \"CuisineCategory\": \"Indian\",\n        \"FileMorbidity\": {\n            \"66ada9f04717cf471aaad20c\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            }\n        },\n        \"FileMorbidityCondition\": {\n            \"66ada9f04717cf471aaad20c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n        },\n        \"DateOfBirth\": \"1988-07-08\",\n        \"DieticianId\": 871,\n        \"Vitals\": {\n            \"66ada9f04717cf471aaad20c\": {\n                \"Weight\": 0,\n                \"Height\": 0,\n                \"Temperature\": 0,\n                \"SP\": 0,\n                \"DP\": 0\n            }\n        },\n        \"LastVisitDate\": \"2024-08-03T03:54:24.117+00:00\"\n    }\n]"
						}
					]
				},
				{
					"name": "N-create_Patient_invalid_endpt",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9278e75e-9340-4fff-b6c3-27740f54607e",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27cd307c-b49b-4959-8cf1-5539bdd1082d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ce0e336e-5a4d-4ff3-bc77-f595a3f0f5db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "{{Dietician_Token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"h\",\n\"LastName\": \"d\",\n\"ContactNumber\": \"1110000001\",\n\"Email\": \"S124@acbd.com\",\n\"Allergy\": \"Soy\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1988-08-05\"}"
								},
								{
									"key": "file",
									"type": "file",
									"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
									"filesNotInWorkingDirectory": [
										"9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
									],
									"src": "9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
								}
							]
						},
						"url": "{{base_URL}}/patient-"
					},
					"response": [
						{
							"id": "e02ed9d9-6f30-4d12-b9eb-bf4375ef8f34",
							"name": "errorMSg-create_Patient_invalid_endpt",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"type": "text",
											"value": "{ \"FirstName\": \"h\",\n\"LastName\": \"d\",\n\"ContactNumber\": \"1110000001\",\n\"Email\": \"S124@acbd.com\",\n\"Allergy\": \"Soy\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1988-08-05\"}"
										},
										{
											"key": "file",
											"type": "file",
											"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
											"filesNotInWorkingDirectory": [
												"9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
											],
											"src": "9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
										}
									]
								},
								"url": "{{base_URL}}/patient-"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722662425&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=g%2B4IVlAbI%2B0pq%2B40GMDfOjhpx6QeUrH%2BdUh4LEtet64%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722662425&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=g%2B4IVlAbI%2B0pq%2B40GMDfOjhpx6QeUrH%2BdUh4LEtet64%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 05:20:25 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"timestamp\": \"2024-08-03T05:20:25.532+00:00\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"path\": \"/dietician/patient-\"\n}"
						}
					]
				},
				{
					"name": "N-create_Patient_without Auth Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9278e75e-9340-4fff-b6c3-27740f54607e",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27cd307c-b49b-4959-8cf1-5539bdd1082d",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "07d95874-6ca3-49f5-8c52-2c89a449c1e6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"h\",\n\"LastName\": \"d\",\n\"ContactNumber\": \"1110000001\",\n\"Email\": \"S124@acbd.com\",\n\"Allergy\": \"Soy\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1988-08-05\"}"
								},
								{
									"key": "file",
									"type": "file",
									"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
									"filesNotInWorkingDirectory": [
										"9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
									],
									"src": "9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
								}
							]
						},
						"url": "{{base_URL}}/patient"
					},
					"response": [
						{
							"id": "726ae48a-9738-49ba-9fb0-ea16ec787f13",
							"name": "New Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"type": "text",
											"value": "{ \"FirstName\": \"h\",\n\"LastName\": \"d\",\n\"ContactNumber\": \"1110000000\",\n\"Email\": \"S124@acbd.com\",\n\"Allergy\": \"Soy\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1988-07-05\"}"
										},
										{
											"key": "file",
											"type": "file",
											"src": "9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
										}
									]
								},
								"url": "{{base_URL}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 04:14:23 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"patientId\": 472,\n    \"FirstName\": \"h\",\n    \"LastName\": \"d\",\n    \"ContactNumber\": \"1110000000\",\n    \"Email\": \"S124@acbd.com\",\n    \"Allergy\": \"Soy\",\n    \"FoodPreference\": \"jain\",\n    \"CuisineCategory\": \"Indian\",\n    \"FileMorbidity\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66adae9f4717cf471aaad21d\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1988-07-05\",\n    \"DieticianId\": 871,\n    \"Vitals\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-03T04:14:23.627+00:00\"\n}"
						}
					]
				},
				{
					"name": "create_Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9278e75e-9340-4fff-b6c3-27740f54607e",
								"exec": [
									"",
									"const response = pm.response.json();",
									"",
									"// // Extract the program name and program status",
									" const patientId = response.patientId;",
									" const PatientEmail=response.Email",
									"",
									" if (pm.response.code === 201 ) {",
									"   // Set collection variables for later use",
									"pm.collectionVariables.set(\"patientId\", patientId);",
									"pm.collectionVariables.set(\"PEmail\", PatientEmail);",
									" }",
									" console.log(\"patientId\", patientId);",
									" console.log(\"PatientEmail\",PatientEmail);",
									"",
									"//Before storing collection variable validating",
									"pm.test(\"patientId is stored as a collection variable\", function () {",
									"    pm.expect(pm.collectionVariables.get(\"patientId\")).to.eql(patientId);",
									"    ",
									"});",
									"pm.test(\"Email is correct\", function () {",
									"    pm.expect(response.Email).to.eql(expectedEmail);",
									"",
									"pm.test(\"First name is not empty\", function () {",
									"    pm.expect(response.FirstName).to.not.be.empty;",
									"});",
									"pm.test(\"Last name is not empty\", function () {",
									"    pm.expect(response.LastName).to.not.be.empty;",
									"});",
									"pm.test(\"Email is not empty\", function () {",
									"    pm.expect(response.Email).to.not.be.empty;",
									"});",
									"pm.test(\"ContactNumber is not empty\", function () {",
									"    pm.expect(response.ContactNumber).to.not.be.empty;",
									"});",
									"pm.test(\"DateOfBirth is not empty\", function () {",
									"    pm.expect(response.DateOfBirth).to.not.be.empty;",
									"});",
									"pm.test(\"Allergies is not empty\", function () {",
									"    pm.expect(response.Allergy).to.not.be.empty;",
									"});",
									"pm.test(\"CuisineCategory is not empty\", function () {",
									"    pm.expect(response.CuisineCategory).to.not.be.empty;",
									"});",
									"// Parse the response JSON",
									"let res = pm.response.json();",
									"",
									"// Extract the fileId",
									"let fileId = Object.keys(res.FileMorbidity)[0];",
									"",
									"// Save the fileId to a collection variable",
									"pm.collectionVariables.set(\"fileId\", fileId);",
									"",
									"// Optionally, log the fileId to verify",
									"console.log(\"fileId saved to collection variable: \", fileId);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27cd307c-b49b-4959-8cf1-5539bdd1082d",
								"exec": [
									"// if (pm.iterationData.get(\"Request\") !== 'CreatePatient') {\r",
									"//     pm.execution.skipRequest();\r",
									"// }\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e7076d92-246f-4a29-87ba-be5679ce5ba8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"heeell\",\n\"LastName\": \"dyed\",\n\"ContactNumber\": \"1111340001\",\n\"Email\": \"Sde15235@acbd.com\",\n\"Allergy\": \"Soy\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1972-08-05\"}"
								},
								{
									"key": "file",
									"type": "file",
									"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
									"filesNotInWorkingDirectory": [
										"3Cryk6-G6/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
									],
									"src": "BOWIfND3z/Hypo Thyroid-Report.pdf.pdf"
								}
							]
						},
						"url": "{{base_URL}}/patient"
					},
					"response": [
						{
							"id": "7067bf98-b111-4867-be0b-88abd48d223b",
							"name": "New Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"type": "text",
											"value": "{ \"FirstName\": \"h\",\n\"LastName\": \"d\",\n\"ContactNumber\": \"1110000000\",\n\"Email\": \"S124@acbd.com\",\n\"Allergy\": \"Soy\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1988-07-05\"}"
										},
										{
											"key": "file",
											"type": "file",
											"src": "9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
										}
									]
								},
								"url": "{{base_URL}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 04:14:23 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"patientId\": 472,\n    \"FirstName\": \"h\",\n    \"LastName\": \"d\",\n    \"ContactNumber\": \"1110000000\",\n    \"Email\": \"S124@acbd.com\",\n    \"Allergy\": \"Soy\",\n    \"FoodPreference\": \"jain\",\n    \"CuisineCategory\": \"Indian\",\n    \"FileMorbidity\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66adae9f4717cf471aaad21d\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1988-07-05\",\n    \"DieticianId\": 871,\n    \"Vitals\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-03T04:14:23.627+00:00\"\n}"
						},
						{
							"id": "caaf56fa-1dc4-46bf-955e-6af4d619c92f",
							"name": "New Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"type": "text",
											"value": "{ \"FirstName\": \"h\",\n\"LastName\": \"d\",\n\"ContactNumber\": \"1110000000\",\n\"Email\": \"S124@acbd.com\",\n\"Allergy\": \"Soy\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1988-07-05\"}"
										},
										{
											"key": "file",
											"type": "file",
											"src": "9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
										}
									]
								},
								"url": "{{base_URL}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 04:14:23 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"patientId\": 472,\n    \"FirstName\": \"h\",\n    \"LastName\": \"d\",\n    \"ContactNumber\": \"1110000000\",\n    \"Email\": \"S124@acbd.com\",\n    \"Allergy\": \"Soy\",\n    \"FoodPreference\": \"jain\",\n    \"CuisineCategory\": \"Indian\",\n    \"FileMorbidity\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66adae9f4717cf471aaad21d\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1988-07-05\",\n    \"DieticianId\": 871,\n    \"Vitals\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-03T04:14:23.627+00:00\"\n}"
						}
					]
				},
				{
					"name": "GetPatientsMorbidityDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e55a389-9817-4d76-9659-104ef45848b6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Check if the response has a JSON content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", /application/json);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e62f405-b007-4ecf-8294-bcc622ffde43",
								"exec": [
									"console.log(pm.info.iteration, pm.info.iterationCount)\r",
									"if ( pm.info.iteration < pm.info.iterationCount - 1) {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2e1e84fe-14fc-4240-a100-79fdd84e1d5b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/patient/testReports/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "update_Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9278e75e-9340-4fff-b6c3-27740f54607e",
								"exec": [
									"const response = pm.response.json();",
									"",
									"// // Extract the program name and program status",
									" const patientId = response.patientId;",
									"",
									" if (pm.response.code === 200) {",
									"   // Set collection variables for later use",
									"pm.collectionVariables.set(\"patientId\", patientId);",
									" }",
									" console.log(\"patientId\", patientId);",
									"//Before storing collection variable validating",
									"pm.test(\"patientId is stored as a collection variable\", function () {",
									"    pm.expect(pm.collectionVariables.get(\"patientId\")).to.eql(patientId);",
									"});",
									"pm.test(\"First name is not empty\", function () {",
									"    pm.expect(jsonData.FirstName).to.not.be.empty;",
									"});",
									"pm.test(\"Last name is not empty\", function () {",
									"    pm.expect(jsonData.LastName).to.not.be.empty;",
									"});",
									"pm.test(\"Email is not empty\",function(){",
									"    pm.expect(jsonData.Email).to.be.not.empty;",
									"});",
									"pm.test(\"ContactNumber is not empty\",function(){",
									"    pm.expect(jsonData.ContactNumber).to.be.not.empty;",
									"});",
									"pm.test(\"DateOfBirth is not empty\",function(){",
									"    pm.expect(jsonData.DateOfBirth).to.be.not.empty;",
									"});",
									"pm.test(\"Allergies is not empty\",function(){",
									"    pm.expect(jsonData.Allergy).to.be.not.empty;",
									"});",
									"",
									"pm.test(\"CuisineCategory is not empty\",function(){",
									"    pm.expect(jsonData.CuisineCategory).to.be.not.empty;",
									"});",
									"// Parse the response JSON",
									"let res = pm.response.json();",
									"",
									"// Extract the fileId",
									"let fileId = Object.keys(res.FileMorbidity)[0];",
									"",
									"// Save the fileId to a collection variable",
									"pm.collectionVariables.set(\"fileId\", fileId);",
									"",
									"// Optionally, log the fileId to verify",
									"console.log(\"fileId saved to collection variable: \", fileId);",
									"  ",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27cd307c-b49b-4959-8cf1-5539bdd1082d",
								"exec": [
									"if (pm.iterationData.get(\"Request\") !== 'UpdatePatient') {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b9ef9a4f-dc0b-4522-b1eb-c97e958c85bf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"Hello\",\n\"LastName\": \"Ninjas\",\n\"ContactNumber\": \"1112000000\",\n\"Email\": \"S124@acbd.com\",\n\"Allergy\": \"Soy\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1999-07-05\"}"
								},
								{
									"key": "file",
									"type": "file",
									"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
									"filesNotInWorkingDirectory": [
										"9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
									],
									"src": "9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
								}
							]
						},
						"url": "{{base_URL}}/patient/{{patientId}}"
					},
					"response": [
						{
							"id": "d0941967-718b-4bd4-98e1-c40ca44a72b1",
							"name": "New Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"type": "text",
											"value": "{ \"FirstName\": \"h\",\n\"LastName\": \"d\",\n\"ContactNumber\": \"1110000000\",\n\"Email\": \"S124@acbd.com\",\n\"Allergy\": \"Soy\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1988-07-05\"}"
										},
										{
											"key": "file",
											"type": "file",
											"src": "9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
										}
									]
								},
								"url": "{{base_URL}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 04:14:23 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"patientId\": 472,\n    \"FirstName\": \"h\",\n    \"LastName\": \"d\",\n    \"ContactNumber\": \"1110000000\",\n    \"Email\": \"S124@acbd.com\",\n    \"Allergy\": \"Soy\",\n    \"FoodPreference\": \"jain\",\n    \"CuisineCategory\": \"Indian\",\n    \"FileMorbidity\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66adae9f4717cf471aaad21d\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1988-07-05\",\n    \"DieticianId\": 871,\n    \"Vitals\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-03T04:14:23.627+00:00\"\n}"
						}
					]
				},
				{
					"name": "N_UpdateAddNewReports_Vital_WithInvalidId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da827469-56e0-438e-83dd-5441a9581a42",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "eba478ae-e86e-4302-83d9-1e732e32fa11",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"{{fname}}\",\n\"LastName\": \"{{lname}}\",\n\"ContactNumber\": \"{{contactno}}\",\n\"Email\": \"{{pemail}}\",\n\"Allergy\": \"{{allergy}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisine}}\",\n\"DateOfBirth\": \"{{dob}}\"\n}"
								},
								{
									"key": "Reports",
									"type": "file",
									"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
									"filesNotInWorkingDirectory": [
										"_DuXivL8A/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
									],
									"src": "_DuXivL8A/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "vitals",
									"value": "{\n       “Weight“ : \"{{weight}}\",\n       “Height” : \"{{height}}\",\n        “Temperature” : \"{{temperature}}\",\n        “SP” : \"{{sp}}\",\n        “DP” : \"{{dp}}\" \n             \t}\n",
									"type": "text"
								}
							]
						},
						"url": "{{base_URL}}/patient/newReports/dgfre"
					},
					"response": []
				},
				{
					"name": "N_UpdateAddNewReprts_Vital_withoutAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da827469-56e0-438e-83dd-5441a9581a42",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5b4ca9bd-bd9f-4ac4-840b-2588ae9c50fb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"setabcr\",\n\"LastName\": \"sdetyze\",\n\"ContactNumber\": \"9123656789\",\n\"Email\": \"asddetb@gmail.com\",\n\"Allergy\": \"PECAN\",\n\"FoodPreference\": \"Vegan\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1985-12-14\"\n}\n"
								},
								{
									"key": "Reports",
									"type": "file",
									"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
									"filesNotInWorkingDirectory": [
										"_DuXivL8A/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
									],
									"src": "_DuXivL8A/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "vitals",
									"value": "{\n       “Weight“ : \"{{weight}}\",\n       “Height” : \"{{height}}\",\n        “Temperature” : \"{{temperature}}\",\n        “SP” : \"{{sp}}\",\n        “DP” : \"{{dp}}\" \n             \t}\n",
									"type": "text"
								}
							]
						},
						"url": "{{base_URL}}/patient/newReports/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "UpdateAddNewReprtsWithVital",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da827469-56e0-438e-83dd-5441a9581a42",
								"exec": [
									"const response = pm.response.json();",
									"",
									"// // Extract the program name and program status",
									" const patientId = response.patientId;",
									"",
									" if (pm.response.code === 200) {",
									"   // Set collection variables for later use",
									"pm.collectionVariables.set(\"patientId\", patientId);",
									" }",
									" console.log(\"patientId\", patientId);",
									"//Before storing collection variable validating",
									"pm.test(\"patientId is stored as a collection variable\", function () {",
									"    pm.expect(pm.collectionVariables.get(\"patientId\")).to.eql(patientId);",
									"});",
									"pm.test(\"First name is not empty\", function () {",
									"    pm.expect(response.FirstName).to.not.be.empty;",
									"});",
									"pm.test(\"Last name is not empty\", function () {",
									"    pm.expect(response.LastName).to.not.be.empty;",
									"});",
									"pm.test(\"Email is not empty\",function(){",
									"    pm.expect(response.Email).to.be.not.empty;",
									"});",
									"pm.test(\"ContactNumber is not empty\",function(){",
									"    pm.expect(response.ContactNumber).to.be.not.empty;",
									"});",
									"pm.test(\"DateOfBirth is not empty\",function(){",
									"    pm.expect(response.DateOfBirth).to.be.not.empty;",
									"});",
									"pm.test(\"Allergies is not empty\",function(){",
									"    pm.expect(response.Allergy).to.be.not.empty;",
									"});",
									"",
									"pm.test(\"CuisineCategory is not empty\",function(){",
									"    pm.expect(response.CuisineCategory).to.be.not.empty;",
									"});",
									"// Parse the response JSON",
									"let res = pm.response.json();",
									"",
									"// Extract the fileId",
									"let fileId = Object.keys(res.FileMorbidity)[0];",
									"",
									"// Save the fileId to a collection variable",
									"pm.collectionVariables.set(\"fileId\", fileId);",
									"",
									"// Optionally, log the fileId to verify",
									"console.log(\"fileId saved to collection variable: \", fileId);",
									"",
									"// Check if the response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Check if the response has a JSON content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									"",
									"// const schema = {",
									"//     \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"//     \"type\": \"object\",",
									"//     \"properties\": {",
									"//         \"patientId\": {",
									"//             \"type\": \"integer\"",
									"//         },",
									"//         \"FirstName\": {",
									"//             \"type\": \"string\"",
									"//         },",
									"//         \"LastName\": {",
									"//             \"type\": \"string\"",
									"//         },",
									"//         \"ContactNumber\": {",
									"//             \"type\": \"string\",",
									"//             \"pattern\": \"^\\\\d{10}$\"",
									"//         },",
									"//         \"Email\": {",
									"//             \"type\": \"string\",",
									"//             \"format\": \"email\"",
									"//         },",
									"//         \"Allergy\": {",
									"//             \"type\": \"string\"",
									"//         },",
									"//         \"FoodPreference\": {",
									"//             \"type\": \"string\"",
									"//         },",
									"//         \"CuisineCategory\": {",
									"//             \"type\": \"string\"",
									"//         },",
									"//         \"FileMorbidity\": {",
									"//             \"type\": \"object\",",
									"//             \"patternProperties\": {",
									"//                 \"^[a-fA-F0-9]{24}$\": {",
									"//                     \"type\": \"object\",",
									"//                     \"properties\": {",
									"//                         \"HbA1c\": {",
									"//                             \"type\": \"string\"",
									"//                         },",
									"//                         \"Average Glucose\": {",
									"//                             \"type\": \"string\"",
									"//                         }",
									"//                     },",
									"//                     \"required\": [\"HbA1c\", \"Average Glucose\"]",
									"//                 }",
									"//             }",
									"//         },",
									"//         \"FileMorbidityCondition\": {",
									"//             \"type\": \"object\",",
									"//             \"patternProperties\": {",
									"//                 \"^[a-fA-F0-9]{24}$\": {",
									"//                     \"type\": \"string\"",
									"//                 }",
									"//             }",
									"//         },",
									"//         \"DateOfBirth\": {",
									"//             \"type\": \"string\",",
									"//             \"format\": \"date\"",
									"//         },",
									"//         \"DieticianId\": {",
									"//             \"type\": \"integer\"",
									"//         },",
									"//         \"Vitals\": {",
									"//             \"type\": \"object\",",
									"//             \"patternProperties\": {",
									"//                 \"^[a-fA-F0-9]{24}$\": {",
									"//                     \"type\": \"object\",",
									"//                     \"properties\": {",
									"//                         \"Weight\": {",
									"//                             \"type\": \"number\"",
									"//                         },",
									"//                         \"Height\": {",
									"//                             \"type\": \"number\"",
									"//                         },",
									"//                         \"Temperature\": {",
									"//                             \"type\": \"number\"",
									"//                         },",
									"//                         \"SP\": {",
									"//                             \"type\": \"integer\"",
									"//                         },",
									"//                         \"DP\": {",
									"//                             \"type\": \"integer\"",
									"//                         }",
									"//                     },",
									"//                     \"required\": [\"Weight\", \"Height\", \"Temperature\", \"SP\", \"DP\"]",
									"//                 }",
									"//             }",
									"//         },",
									"//         \"LastVisitDate\": {",
									"//             \"type\": \"string\",",
									"//             \"format\": \"date-time\"",
									"//         }",
									"//     },",
									"//     \"required\": [\"patientId\", \"FirstName\", \"LastName\", \"ContactNumber\", \"Email\", \"Allergy\", \"FoodPreference\", \"CuisineCategory\", \"FileMorbidity\", \"FileMorbidityCondition\", \"DateOfBirth\", \"DieticianId\", \"Vitals\", \"LastVisitDate\"]",
									"// }",
									"// pm.test(\"Schema is valid\", function () {",
									"//     pm.response.to.have.jsonSchema(schema);",
									"// });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f21df221-d3e6-4138-8138-f584d1c4d837",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"setebcr\",\n\"LastName\": \"sdetyze\",\n\"ContactNumber\": \"9193656789\",\n\"Email\": \"asddetb1@gmail.com\",\n\"Allergy\": \"PECAN\",\n\"FoodPreference\": \"Vegan\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1985-12-14\"\n}\n"
								},
								{
									"key": "Reports",
									"type": "file",
									"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
									"filesNotInWorkingDirectory": [
										"_DuXivL8A/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
									],
									"src": "_DuXivL8A/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "vitals",
									"value": "{\n       “Weight“ : 45.0,\n       “Height” : 5.5,\n        “Temperature” : 99.0,\n        “SP” : 4,\n        “DP” : 5\n \n             \t}\n",
									"type": "text"
								}
							]
						},
						"url": "{{base_URL}}/patient/newReports/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "UpdateAddNewReprtsWithVital Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da827469-56e0-438e-83dd-5441a9581a42",
								"exec": [
									"const response = pm.response.json();",
									"",
									"// // Extract the program name and program status",
									" const patientId = response.patientId;",
									"",
									" if (pm.response.code === 200) {",
									"   // Set collection variables for later use",
									"pm.collectionVariables.set(\"patientId\", patientId);",
									" }",
									" console.log(\"patientId\", patientId);",
									"//Before storing collection variable validating",
									"pm.test(\"patientId is stored as a collection variable\", function () {",
									"    pm.expect(pm.collectionVariables.get(\"patientId\")).to.eql(patientId);",
									"});",
									"pm.test(\"First name is not empty\", function () {",
									"    pm.expect(jsonData.FirstName).to.not.be.empty;",
									"});",
									"pm.test(\"Last name is not empty\", function () {",
									"    pm.expect(jsonData.LastName).to.not.be.empty;",
									"});",
									"pm.test(\"Email is not empty\",function(){",
									"    pm.expect(jsonData.Email).to.be.not.empty;",
									"});",
									"pm.test(\"ContactNumber is not empty\",function(){",
									"    pm.expect(jsonData.ContactNumber).to.be.not.empty;",
									"});",
									"pm.test(\"DateOfBirth is not empty\",function(){",
									"    pm.expect(jsonData.DateOfBirth).to.be.not.empty;",
									"});",
									"pm.test(\"Allergies is not empty\",function(){",
									"    pm.expect(jsonData.Allergy).to.be.not.empty;",
									"});",
									"",
									"pm.test(\"CuisineCategory is not empty\",function(){",
									"    pm.expect(jsonData.CuisineCategory).to.be.not.empty;",
									"});",
									"// Parse the response JSON",
									"let res = pm.response.json();",
									"",
									"// Extract the fileId",
									"let fileId = Object.keys(res.FileMorbidity)[0];",
									"",
									"// Save the fileId to a collection variable",
									"pm.collectionVariables.set(\"fileId\", fileId);",
									"",
									"// Optionally, log the fileId to verify",
									"console.log(\"fileId saved to collection variable: \", fileId);",
									"",
									"// Check if the response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Check if the response has a JSON content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", /application/json);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6533ee8c-dec0-4f08-8155-01a32fe5ed07",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"{{fname}}\",\n\"LastName\": \"{{lname}}\",\n\"ContactNumber\": \"{{contactno}}\",\n\"Email\": \"{{pemail}}\",\n\"Allergy\": \"{{allergy}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisine}}\",\n\"DateOfBirth\": \"{{dob}}\"\n}"
								},
								{
									"key": "Reports",
									"type": "file",
									"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
									"filesNotInWorkingDirectory": [
										"_DuXivL8A/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
									],
									"src": "_DuXivL8A/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "vitals",
									"value": "{\n       “Weight“ : \"{{weight}}\",\n       “Height” : \"{{height}}\",\n        “Temperature” : \"{{temperature}}\",\n        “SP” : \"{{sp}}\",\n        “DP” : \"{{dp}}\" \n             \t}\n",
									"type": "text"
								}
							]
						},
						"url": "{{base_URL}}/patient/newReports/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "N_UpdateAddNewReprts_withoutVitals_InvalidEndpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da827469-56e0-438e-83dd-5441a9581a42",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1d3bdb1b-78d2-4e1d-91fd-37d69ab05c59",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"{{fname}}\",\n\"LastName\": \"{{lname}}\",\n\"ContactNumber\": \"{{contactno}}\",\n\"Email\": \"{{pemail}}\",\n\"Allergy\": \"{{allergy}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisine}}\",\n\"DateOfBirth\": \"{{dob}}\"\n}"
								},
								{
									"key": "Reports",
									"type": "file",
									"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
									"filesNotInWorkingDirectory": [
										"_DuXivL8A/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
									],
									"src": "_DuXivL8A/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								}
							]
						},
						"url": "{{base_URL}}/patient/newReports/sdet1"
					},
					"response": []
				},
				{
					"name": "N_UpdateAddNewReprts_withoutVitals_WithoutAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da827469-56e0-438e-83dd-5441a9581a42",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "882a3d4b-5118-4e0c-9442-5990b9d4009a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"{{fname}}\",\n\"LastName\": \"{{lname}}\",\n\"ContactNumber\": \"{{contactno}}\",\n\"Email\": \"{{pemail}}\",\n\"Allergy\": \"{{allergy}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisine}}\",\n\"DateOfBirth\": \"{{dob}}\"\n}"
								},
								{
									"key": "Reports",
									"type": "file",
									"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
									"filesNotInWorkingDirectory": [
										"_DuXivL8A/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
									],
									"src": "_DuXivL8A/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								}
							]
						},
						"url": "{{base_URL}}/patient/newReports/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "UpdateAddNewReprtsWithVital Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da827469-56e0-438e-83dd-5441a9581a42",
								"exec": [
									"const response = pm.response.json();",
									"",
									"// // Extract the program name and program status",
									" const patientId = response.patientId;",
									"",
									" if (pm.response.code === 200) {",
									"   // Set collection variables for later use",
									"pm.collectionVariables.set(\"patientId\", patientId);",
									" }",
									" console.log(\"patientId\", patientId);",
									"//Before storing collection variable validating",
									"pm.test(\"patientId is stored as a collection variable\", function () {",
									"    pm.expect(pm.collectionVariables.get(\"patientId\")).to.eql(patientId);",
									"});",
									"pm.test(\"First name is not empty\", function () {",
									"    pm.expect(jsonData.FirstName).to.not.be.empty;",
									"});",
									"pm.test(\"Last name is not empty\", function () {",
									"    pm.expect(jsonData.LastName).to.not.be.empty;",
									"});",
									"pm.test(\"Email is not empty\",function(){",
									"    pm.expect(jsonData.Email).to.be.not.empty;",
									"});",
									"pm.test(\"ContactNumber is not empty\",function(){",
									"    pm.expect(jsonData.ContactNumber).to.be.not.empty;",
									"});",
									"pm.test(\"DateOfBirth is not empty\",function(){",
									"    pm.expect(jsonData.DateOfBirth).to.be.not.empty;",
									"});",
									"pm.test(\"Allergies is not empty\",function(){",
									"    pm.expect(jsonData.Allergy).to.be.not.empty;",
									"});",
									"",
									"pm.test(\"CuisineCategory is not empty\",function(){",
									"    pm.expect(jsonData.CuisineCategory).to.be.not.empty;",
									"});",
									"// Parse the response JSON",
									"let res = pm.response.json();",
									"",
									"// Extract the fileId",
									"let fileId = Object.keys(res.FileMorbidity)[0];",
									"",
									"// Save the fileId to a collection variable",
									"pm.collectionVariables.set(\"fileId\", fileId);",
									"",
									"// Optionally, log the fileId to verify",
									"console.log(\"fileId saved to collection variable: \", fileId);",
									"",
									"// Check if the response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Check if the response has a JSON content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", /application/json);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "353109fb-f17b-4966-b564-9de8b5704e97",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"{{fname}}\",\n\"LastName\": \"{{lname}}\",\n\"ContactNumber\": \"{{contactno}}\",\n\"Email\": \"{{pemail}}\",\n\"Allergy\": \"{{allergy}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisine}}\",\n\"DateOfBirth\": \"{{dob}}\"\n}"
								},
								{
									"key": "Reports",
									"type": "file",
									"src": "FKqp6gUq5/Deticianvitals.xlsx - Sheet1.csv"
								},
								{
									"key": "vitals",
									"value": "{\n       “Weight“ : \"{{weight}}\",\n       “Height” : \"{{height}}\",\n        “Temperature” : \"{{temperature}}\",\n        “SP” : \"{{sp}}\",\n        “DP” : \"{{dp}}\" \n             \t}\n",
									"type": "text"
								}
							]
						},
						"url": "{{base_URL}}/patient/newReports/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "GetOperatioRetrievePatientfilebyFileId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e8e1614-eb68-476c-9e46-7fbbcff663c5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Check if the response has a JSON content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", /application/json);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "18f35a46-9c66-4ccd-b567-2c79a99718df",
								"exec": [
									"console.log(pm.info.iteration, pm.info.iterationCount)\r",
									"if ( pm.info.iteration < pm.info.iterationCount - 1) {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "37596610-c6cd-42ca-bed7-aa255014d81e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/patient/testReports/viewFile/{{fileId}}"
					},
					"response": []
				},
				{
					"name": "GetAllMorbidities_byDietecian",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65780b51-c211-4f4e-bbd5-6b8a657b8f13",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Each morbidity object has the required properties\", function () {",
									"    pm.response.json().forEach(function(morbidity) {",
									"        pm.expect(morbidity).to.have.property('morbidityId');",
									"        pm.expect(morbidity).to.have.property('morbidityTestId');",
									"        pm.expect(morbidity).to.have.property('morbidityNameRegex');",
									"        pm.expect(morbidity).to.have.property('morbidityTestName');",
									"        pm.expect(morbidity).to.have.property('morbidityTestUnit');",
									"        pm.expect(morbidity).to.have.property('morbidityMarkerMinVal');",
									"        pm.expect(morbidity).to.have.property('morbidityMarkerMaxVal');",
									"    });",
									"});",
									"",
									"",
									"var schema = {",
									" ",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"$schema\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"$id\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"type\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"default\": {",
									"      \"type\": \"array\",",
									"      \"items\": {}",
									"    },",
									"    \"title\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"items\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"type\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"title\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"required\": {",
									"          \"type\": \"array\",",
									"          \"items\": [",
									"            {",
									"              \"type\": \"string\"",
									"            },",
									"            {",
									"              \"type\": \"string\"",
									"            },",
									"            {",
									"              \"type\": \"string\"",
									"            },",
									"            {",
									"              \"type\": \"string\"",
									"            },",
									"            {",
									"              \"type\": \"string\"",
									"            },",
									"            {",
									"              \"type\": \"string\"",
									"            },",
									"            {",
									"              \"type\": \"string\"",
									"            }",
									"          ]",
									"        },",
									"        \"properties\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"morbidityId\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"type\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"title\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"examples\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": [",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    }",
									"                  ]",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"type\",",
									"                \"title\",",
									"                \"examples\"",
									"              ]",
									"            },",
									"            \"morbidityTestId\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"type\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"title\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"examples\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": [",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  ]",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"type\",",
									"                \"title\",",
									"                \"examples\"",
									"              ]",
									"            },",
									"            \"morbidityNameRegex\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"type\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"title\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"examples\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": [",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  ]",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"type\",",
									"                \"title\",",
									"                \"examples\"",
									"              ]",
									"            },",
									"            \"morbidityTestName\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"type\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"title\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"examples\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": [",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  ]",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"type\",",
									"                \"title\",",
									"                \"examples\"",
									"              ]",
									"            },",
									"            \"morbidityTestUnit\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"type\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"title\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"examples\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": [",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  ]",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"type\",",
									"                \"title\",",
									"                \"examples\"",
									"              ]",
									"            },",
									"            \"morbidityMarkerMinVal\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"type\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"title\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"examples\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": [",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    }",
									"                  ]",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"type\",",
									"                \"title\",",
									"                \"examples\"",
									"              ]",
									"            },",
									"            \"morbidityMarkerMaxVal\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"type\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"title\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"examples\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": [",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    }",
									"                  ]",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"type\",",
									"                \"title\",",
									"                \"examples\"",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"morbidityId\",",
									"            \"morbidityTestId\",",
									"            \"morbidityNameRegex\",",
									"            \"morbidityTestName\",",
									"            \"morbidityTestUnit\",",
									"            \"morbidityMarkerMinVal\",",
									"            \"morbidityMarkerMaxVal\"",
									"          ]",
									"        },",
									"        \"examples\": {",
									"          \"type\": \"array\",",
									"          \"items\": [",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            }",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"type\",",
									"        \"title\",",
									"        \"required\",",
									"        \"properties\",",
									"        \"examples\"",
									"      ]",
									"    },",
									"    \"examples\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"array\",",
									"          \"items\": [",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            }",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"$schema\",",
									"    \"$id\",",
									"    \"type\",",
									"    \"default\",",
									"    \"title\",",
									"    \"items\",",
									"    \"examples\"",
									"  ]",
									"};",
									"",
									"var actualJsonData = pm.response.json();",
									"",
									"pm.test('Schema is valid', function() {",
									"  ",
									"  pm.expect(tv4.validate(actualJsonData, schema)).to.be.true;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "56b80b92-1f10-43cb-a382-77dd97c08f05",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Fasting Glucose)_byDietecian",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55202cd-58c9-497b-a08d-cfc188b2d208",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Morbidity properties validation\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach((item) => {",
									"        pm.expect(item.morbidityId).to.be.a('number').and.to.be.at.least(0, \"morbidityId should be a non-negative integer\");",
									"        pm.expect(item.morbidityTestId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestId should be a non-empty string\");",
									"        pm.expect(item.morbidityTestName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestName should be a non-empty string\");",
									"        pm.expect(item.morbidityTestUnit).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestUnit should be a non-empty string\");",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMinVal should be a non-negative integer\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMaxVal should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"const schema = {",
									"  ",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    }",
									"  ]",
									"}",
									"pm.test(\"Response contsins valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Validate TestName value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestName).to.eql(\"Fasting Glucose\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"pm.test(\"Validate TestUnit\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestUnit).to.eql(\"mg/dL\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"pm.test(\"Validate Min&Max value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityMarkerMinVal).to.eql(100);",
									"    pm.expect(response[0].morbidityMarkerMinVal).to.be.a(\"number\");",
									"    pm.expect(response[0].morbidityMarkerMaxVal).to.eql(125);",
									"    pm.expect(response[0].morbidityMarkerMaxVal).to.be.a(\"number\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4f846ffd-6c2d-46b3-bdae-2c9fdcc1bb03",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/Fasting Glucose"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Plasma Glucose)_byDietecian",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55202cd-58c9-497b-a08d-cfc188b2d208",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Header Validation ,Check if the response has a JSON content type",
									"pm.test(\"content-type header is present\", function(){",
									" pm.response.to.have.header(\"Content-type\");",
									"});",
									"",
									"pm.test(\"Verify response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Morbidity properties validation\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach((item) => {",
									"        pm.expect(item.morbidityId).to.be.a('number').and.to.be.at.least(0, \"morbidityId should be a non-negative integer\");",
									"        pm.expect(item.morbidityTestId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestId should be a non-empty string\");",
									"        pm.expect(item.morbidityTestName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestName should be a non-empty string\");",
									"        pm.expect(item.morbidityTestUnit).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestUnit should be a non-empty string\");",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMinVal should be a non-negative integer\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMaxVal should be a non-negative integer\");",
									"    });",
									"});",
									"pm.test(\"Validate TestName value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestName).to.eql(\"Plasma Glucose\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"pm.test(\"Validate TestUnit\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestUnit).to.eql(\"mg/dL\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"",
									"pm.test(\"Validate Min&Max value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityMarkerMinVal).to.eql(140);",
									"    pm.expect(response[0].morbidityMarkerMinVal).to.be.a(\"number\");",
									"    pm.expect(response[0].morbidityMarkerMaxVal).to.eql(199);",
									"    pm.expect(response[0].morbidityMarkerMaxVal).to.be.a(\"number\");",
									"});",
									"",
									"const schema = {",
									"  ",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    }",
									"  ]",
									"}",
									"pm.test(\"Response contains valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "430e18db-5108-4879-a008-dccde0ef8fc6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/Plasma Glucose"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Average Glucose)_byDietecian",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55202cd-58c9-497b-a08d-cfc188b2d208",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Header Validation ,Check if the response has a JSON content type",
									"pm.test(\"content-type header is present\", function(){",
									" pm.response.to.have.header(\"Content-type\");",
									"});",
									"",
									"pm.test(\"Verify response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Morbidity properties validation\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach((item) => {",
									"        pm.expect(item.morbidityId).to.be.a('number').and.to.be.at.least(0, \"morbidityId should be a non-negative integer\");",
									"        pm.expect(item.morbidityTestId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestId should be a non-empty string\");",
									"        pm.expect(item.morbidityTestName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestName should be a non-empty string\");",
									"        pm.expect(item.morbidityTestUnit).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestUnit should be a non-empty string\");",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMinVal should be a non-negative integer\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMaxVal should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"",
									"",
									"pm.test(\"Validate TestName value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestName).to.eql(\"Average Glucose\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"pm.test(\"Validate TestUnit\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestUnit).to.eql(\"mg/dL\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"pm.test(\"Validate Min&Max value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityMarkerMinVal).to.eql(121);",
									"    pm.expect(response[0].morbidityMarkerMinVal).to.be.a(\"number\");",
									"    pm.expect(response[0].morbidityMarkerMaxVal).to.eql(150);",
									"    pm.expect(response[0].morbidityMarkerMaxVal).to.be.a(\"number\");",
									"});",
									"",
									"const schema = {",
									"  ",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    }",
									"  ]",
									"}",
									"pm.test(\"Response contains valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2cc6a49e-aa14-467a-abdc-add391ab178a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/Average Glucose"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(HBA1C)_byDietecian",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55202cd-58c9-497b-a08d-cfc188b2d208",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Header Validation ,Check if the response has a JSON content type",
									"pm.test(\"content-type header is present\", function(){",
									" pm.response.to.have.header(\"Content-type\");",
									"});",
									"",
									"pm.test(\"Verify response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"//Morbidity properties validation",
									"pm.test(\"Morbidity properties validation\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach((item) => {",
									"        pm.expect(item.morbidityId).to.be.a('number').and.to.be.at.least(0, \"morbidityId should be a non-negative integer\");",
									"        pm.expect(item.morbidityTestId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestId should be a non-empty string\");",
									"        pm.expect(item.morbidityTestName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestName should be a non-empty string\");",
									"        pm.expect(item.morbidityTestUnit).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestUnit should be a non-empty string\");",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMinVal should be a non-negative integer\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMaxVal should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"//Validate TestName value and datatype in response",
									"pm.test(\"Validate TestName value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestName).to.eql(\"HbA1c\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"//Validate TestUnit",
									"pm.test(\"Validate TestUnit\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestUnit).to.eql(\"%\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"//Validate Min&Max value and datatype in response",
									"pm.test(\"Validate Min&Max value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityMarkerMinVal).to.eql(5.7);",
									"    pm.expect(response[0].morbidityMarkerMinVal).to.be.a(\"number\");",
									"    pm.expect(response[0].morbidityMarkerMaxVal).to.eql(6.5);",
									"    pm.expect(response[0].morbidityMarkerMaxVal).to.be.a(\"number\");",
									"});",
									"",
									"const schema = {",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    }",
									"  ]",
									"}",
									"pm.test(\"Response contains valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "db4c6291-7ec7-4bb0-b313-c5ed9e17aeda",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/HBA1C"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Thyroid/TSH)_byDietecian",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55202cd-58c9-497b-a08d-cfc188b2d208",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Header Validation ,Check if the response has a JSON content type",
									"pm.test(\"content-type header is present\", function(){",
									" pm.response.to.have.header(\"Content-type\");",
									"});",
									"",
									"pm.test(\"Verify response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"//Morbidity properties validation",
									"pm.test(\"Morbidity properties validation\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach((item) => {",
									"        pm.expect(item.morbidityId).to.be.a('number').and.to.be.at.least(0, \"morbidityId should be a non-negative integer\");",
									"        pm.expect(item.morbidityTestId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestId should be a non-empty string\");",
									"        pm.expect(item.morbidityTestName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestName should be a non-empty string\");",
									"        pm.expect(item.morbidityTestUnit).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestUnit should be a non-empty string\");",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMinVal should be a non-negative integer\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMaxVal should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"//Validate TestName value and datatype in response",
									"pm.test(\"Validate TestName value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestName).to.eql(\"TSH\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"//Validate TestUnit",
									"pm.test(\"Validate Morbidity Test Units\", function () {",
									"    const response = pm.response.json();",
									"    const validUnits = [\"μIU/ml\", \"uIU/ml\", \"mIU/L\"];",
									"",
									"    response.forEach(item => {",
									"        // Check if the unit is valid",
									"        pm.expect(validUnits.includes(item.morbidityTestUnit)).to.be.true;",
									"    });",
									"});",
									"",
									"//Validate Min&Max value and datatype in response",
									"/*pm.test(\"Validate Min & Max values in response\", function () {",
									"    const response = pm.response.json();",
									"",
									"    // expected min and max values",
									"    const expectedValues = {",
									"        5: { min: 0.55, max: 4.78 },",
									"        6: { min: 0.55, max: 4.78 },",
									"        15: { min: 0.45, max: 4.12 }",
									"    };*/",
									"",
									"    pm.test(\"Validate Min & Max Values\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    response.forEach(item => {",
									"        // Validate min and max values are numbers",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a(\"number\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a(\"number\");",
									"",
									"        // checking if min and max values are within a reasonable range",
									"        // Example range: min >= 0 and max <= 1000 ",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.at.least(0);",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.at.most(1000);",
									"    });",
									"});",
									"",
									"const schema = {",
									"  ",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    }",
									"  ]",
									"}",
									"pm.test(\"Response contains valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"    ",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1fe7bef8-d510-495d-9d52-b96947f44291",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/TSH"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Thyroid/T3)_byDietecian",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55202cd-58c9-497b-a08d-cfc188b2d208",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Header Validation ,Check if the response has a JSON content type",
									"pm.test(\"content-type header is present\", function(){",
									" pm.response.to.have.header(\"Content-type\");",
									"});",
									"",
									"pm.test(\"Verify response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"//Morbidity properties validation",
									"pm.test(\"Morbidity properties validation\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach((item) => {",
									"        pm.expect(item.morbidityId).to.be.a('number').and.to.be.at.least(0, \"morbidityId should be a non-negative integer\");",
									"        pm.expect(item.morbidityTestId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestId should be a non-empty string\");",
									"        pm.expect(item.morbidityTestName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestName should be a non-empty string\");",
									"        pm.expect(item.morbidityTestUnit).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestUnit should be a non-empty string\");",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMinVal should be a non-negative integer\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMaxVal should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"//Validate TestName value and datatype in response",
									"pm.test(\"Validate TestName value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestName).to.eql(\"T3\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"//Validate TestUnit",
									"pm.test(\"Validate Morbidity Test Units\", function () {",
									"    const response = pm.response.json();",
									"    const validUnits = [\"ng/dL\", \"ng/mL\", \"pg/mL\", \"nmol/L\"];",
									"",
									"    response.forEach(item => {",
									"        // Check if the unit is valid",
									"        pm.expect(validUnits.includes(item.morbidityTestUnit)).to.be.true;",
									"    });",
									"});",
									"",
									"//Validate Min&Max value and datatype in response",
									" pm.test(\"Validate Min & Max Values\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    response.forEach(item => {",
									"        // Validate min and max values are numbers",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a(\"number\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a(\"number\");",
									"",
									"        // checking if min and max values are within a reasonable range",
									"        // Example range: min >= 0 and max <= 1000 ",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.at.least(0);",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.at.most(1000);",
									"    });",
									"});",
									"",
									"const schema = {",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    }",
									"  ]",
									"}",
									"pm.test(\"Response contains valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "bb4546a7-2f5a-4c66-be2b-9572f88867d9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/T3"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Thyroid/T4)_byDietecian",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55202cd-58c9-497b-a08d-cfc188b2d208",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Header Validation ,Check if the response has a JSON content type",
									"pm.test(\"content-type header is present\", function(){",
									" pm.response.to.have.header(\"Content-type\");",
									"});",
									"",
									"pm.test(\"Verify response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"//Morbidity properties validation",
									"pm.test(\"Morbidity properties validation\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach((item) => {",
									"        pm.expect(item.morbidityId).to.be.a('number').and.to.be.at.least(0, \"morbidityId should be a non-negative integer\");",
									"        pm.expect(item.morbidityTestId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestId should be a non-empty string\");",
									"        pm.expect(item.morbidityTestName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestName should be a non-empty string\");",
									"        pm.expect(item.morbidityTestUnit).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestUnit should be a non-empty string\");",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMinVal should be a non-negative integer\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMaxVal should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"//Validate TestName value and datatype in response",
									"pm.test(\"Validate TestName value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestName).to.eql(\"T4\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"//Validate TestUnit",
									"pm.test(\"Validate Morbidity Test Units\", function () {",
									"    const response = pm.response.json();",
									"    const validUnits = [\"μg/dL\", \"ug/dL\", \"ng/dL\"];",
									"",
									"    response.forEach(item => {",
									"        // Check if the unit is valid",
									"        pm.expect(validUnits.includes(item.morbidityTestUnit)).to.be.true;",
									"    });",
									"});",
									"",
									"//Validate Min&Max value and datatype in response",
									" pm.test(\"Validate Min & Max Values\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    response.forEach(item => {",
									"        // Validate min and max values are numbers",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a(\"number\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a(\"number\");",
									"",
									"        // checking if min and max values are within a reasonable range",
									"        // Example range: min >= 0 and max <= 1000 ",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.at.least(0);",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.at.most(1000);",
									"    });",
									"});",
									"",
									"const schema = {",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    }",
									"  ]",
									"}",
									"pm.test(\"Response contains valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6ba07abd-cffb-4183-bb69-44479aaf60d7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/T4"
					},
					"response": []
				}
			],
			"id": "76a595f1-6075-403b-9569-eb87b5cda9ce"
		},
		{
			"name": "Patient",
			"item": [
				{
					"name": "PatientLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9358130-83db-438b-9666-63266689214a",
								"exec": [
									"let resp = pm.response.json();\r",
									"let Patient_token=resp.token;\r",
									"if (pm.response.code === 200 ) {\r",
									"   // Set collection variables for later use\r",
									"pm.collectionVariables.set(\"Patient_Token\", Patient_token);\r",
									" }\r",
									"//pm.collectionVariables.set(\"Patient_Token\", resp.token);\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.resp.to.have.status(200);\r",
									"});\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"loginUserEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"token\",\r",
									"    \"type\",\r",
									"    \"userId\",\r",
									"    \"loginUserEmail\",\r",
									"    \"roles\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response contsins valid schema data\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7ab1ad30-61a6-4b9a-ad5f-99f7d44b0ae0",
								"exec": [
									"// if (pm.info.iteration !== 0) { \r",
									"//       pm.execution.skipRequest();\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4a60463d-5ab4-461d-8790-75c1de474665",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"{{patientPsw}}\",\r\n    \"userLoginEmail\": \"{{Patientemail}}\"\r\n   \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/login"
					},
					"response": []
				},
				{
					"name": "N_GetPatientfilebyFileId _Without_Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "432fe67f-80c6-4368-bb92-007d4877655e",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"    pm.expect(jsonData.error).to.include(\"Unauthorized\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8745352a-7e0e-4623-bb7c-bd866825aaf9",
								"exec": [
									"console.log(pm.info.iteration, pm.info.iterationCount)\r",
									"if ( pm.info.iteration < pm.info.iterationCount - 1) {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3f4f5974-850b-4998-83ef-ba006bf2db90",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_URL}}/patient/testReports/viewFile/:fileId",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"patient",
								"testReports",
								"viewFile",
								":fileId"
							],
							"variable": [
								{
									"key": "fileId",
									"value": "{{fileId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "N_GetPatientfilebyFileId_Invalid_endPoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e928ca12-4ef4-4e26-83ee-cea98c228c82",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "57dd6ea4-a2d2-4801-92a7-2e440c7e6e8c",
								"exec": [
									"console.log(pm.info.iteration, pm.info.iterationCount)\r",
									"if ( pm.info.iteration < pm.info.iterationCount - 1) {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4d219272-ade5-4380-a952-b6f859dfe4bd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/patient/testReports/viewFile/fiename"
					},
					"response": []
				},
				{
					"name": "GetPatientfilebyFileId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e8e1614-eb68-476c-9e46-7fbbcff663c5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Check if the response has a JSON content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", /application/json);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "18f35a46-9c66-4ccd-b567-2c79a99718df",
								"exec": [
									"console.log(pm.info.iteration, pm.info.iterationCount)\r",
									"if ( pm.info.iteration < pm.info.iterationCount - 1) {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b6357206-b3cf-4381-9a2c-e5c321d7dbf1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/patient/testReports/viewFile/{{fileId}}"
					},
					"response": []
				},
				{
					"name": "N_GetPatientsMorbidityDetailswithout_Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f71989ea-6731-44c7-ac24-132333a5fde2",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f2be467c-cf84-4d5a-8591-1790d27de7eb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_URL}}/patient/testReports/:patentId",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"patient",
								"testReports",
								":patentId"
							],
							"variable": [
								{
									"key": "patentId",
									"value": "{{patientId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "N_GetPatientsMorbidityDetails_invalid_Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "261986ef-b8ab-4052-927c-1f15b4741328",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3327b0ef-615e-49d1-ae74-56fe715fa7ec",
								"exec": [
									"console.log(pm.info.iteration, pm.info.iterationCount)\r",
									"if ( pm.info.iteration < pm.info.iterationCount - 1) {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9c2ec3f1-8a13-4980-9171-16f4b7c8a147",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/patient/testReports/patientName"
					},
					"response": []
				},
				{
					"name": "GetPatientsMorbidityDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e55a389-9817-4d76-9659-104ef45848b6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Check if the response has a JSON content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", /application/json);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e62f405-b007-4ecf-8294-bcc622ffde43",
								"exec": [
									"console.log(pm.info.iteration, pm.info.iterationCount)\r",
									"if ( pm.info.iteration < pm.info.iterationCount - 1) {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a06d726f-f72c-467a-a8ae-1f5667ded6d5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_URL}}/patient/testReports/:patientId",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"patient",
								"testReports",
								":patientId"
							],
							"variable": [
								{
									"key": "patientId",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "79efb4d0-725e-4043-a8c5-75e6f8acaaac"
		},
		{
			"name": "Morbidity",
			"item": [
				{
					"name": "GetAllMorbidities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "553b74a4-b57c-44bb-97bc-fde29514a318",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Each morbidity object has the required properties\", function () {",
									"    pm.response.json().forEach(function(morbidity) {",
									"        pm.expect(morbidity).to.have.property('morbidityId');",
									"        pm.expect(morbidity).to.have.property('morbidityTestId');",
									"        pm.expect(morbidity).to.have.property('morbidityNameRegex');",
									"        pm.expect(morbidity).to.have.property('morbidityTestName');",
									"        pm.expect(morbidity).to.have.property('morbidityTestUnit');",
									"        pm.expect(morbidity).to.have.property('morbidityMarkerMinVal');",
									"        pm.expect(morbidity).to.have.property('morbidityMarkerMaxVal');",
									"    });",
									"});",
									"",
									"//Header Validation ,Check if the response has a JSON content type",
									"pm.test(\"content-type header is present\", function(){",
									" pm.response.to.have.header(\"Content-type\");",
									"});",
									"",
									"pm.test(\"content-type header is application/json\", function(){",
									"    pm.expect(pm.response.headers.get('Content-type')).to.equal('application/json');",
									"});",
									"",
									"//Json schema validation",
									"/*var schema = {",
									" // \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"$schema\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"$id\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"type\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"default\": {",
									"      \"type\": \"array\",",
									"      \"items\": {}",
									"    },",
									"    \"title\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"items\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"type\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"title\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"required\": {",
									"          \"type\": \"array\",",
									"          \"items\": [",
									"            {",
									"              \"type\": \"string\"",
									"            },",
									"            {",
									"              \"type\": \"string\"",
									"            },",
									"            {",
									"              \"type\": \"string\"",
									"            },",
									"            {",
									"              \"type\": \"string\"",
									"            },",
									"            {",
									"              \"type\": \"string\"",
									"            },",
									"            {",
									"              \"type\": \"string\"",
									"            },",
									"            {",
									"              \"type\": \"string\"",
									"            }",
									"          ]",
									"        },",
									"        \"properties\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"morbidityId\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"type\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"title\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"examples\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": [",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    },",
									"                    {",
									"                      \"type\": \"integer\"",
									"                    }",
									"                  ]",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"type\",",
									"                \"title\",",
									"                \"examples\"",
									"              ]",
									"            },",
									"            \"morbidityTestId\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"type\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"title\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"examples\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": [",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  ]",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"type\",",
									"                \"title\",",
									"                \"examples\"",
									"              ]",
									"            },",
									"            \"morbidityNameRegex\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"type\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"title\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"examples\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": [",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  ]",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"type\",",
									"                \"title\",",
									"                \"examples\"",
									"              ]",
									"            },",
									"            \"morbidityTestName\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"type\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"title\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"examples\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": [",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  ]",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"type\",",
									"                \"title\",",
									"                \"examples\"",
									"              ]",
									"            },",
									"            \"morbidityTestUnit\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"type\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"title\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"examples\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": [",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  ]",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"type\",",
									"                \"title\",",
									"                \"examples\"",
									"              ]",
									"            },",
									"            \"morbidityMarkerMinVal\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"type\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"title\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"examples\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": [",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    }",
									"                  ]",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"type\",",
									"                \"title\",",
									"                \"examples\"",
									"              ]",
									"            },",
									"            \"morbidityMarkerMaxVal\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"type\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"title\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"examples\": {",
									"                  \"type\": \"array\",",
									"                  \"items\": [",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    },",
									"                    {",
									"                      \"type\": \"number\"",
									"                    }",
									"                  ]",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"type\",",
									"                \"title\",",
									"                \"examples\"",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"morbidityId\",",
									"            \"morbidityTestId\",",
									"            \"morbidityNameRegex\",",
									"            \"morbidityTestName\",",
									"            \"morbidityTestUnit\",",
									"            \"morbidityMarkerMinVal\",",
									"            \"morbidityMarkerMaxVal\"",
									"          ]",
									"        },",
									"        \"examples\": {",
									"          \"type\": \"array\",",
									"          \"items\": [",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            }",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"type\",",
									"        \"title\",",
									"        \"required\",",
									"        \"properties\",",
									"        \"examples\"",
									"      ]",
									"    },",
									"    \"examples\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"array\",",
									"          \"items\": [",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"morbidityId\": {",
									"                  \"type\": \"integer\"",
									"                },",
									"                \"morbidityTestId\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityNameRegex\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestName\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityTestUnit\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"morbidityMarkerMinVal\": {",
									"                  \"type\": \"number\"",
									"                },",
									"                \"morbidityMarkerMaxVal\": {",
									"                  \"type\": \"number\"",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"morbidityId\",",
									"                \"morbidityTestId\",",
									"                \"morbidityNameRegex\",",
									"                \"morbidityTestName\",",
									"                \"morbidityTestUnit\",",
									"                \"morbidityMarkerMinVal\",",
									"                \"morbidityMarkerMaxVal\"",
									"              ]",
									"            }",
									"          ]",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"$schema\",",
									"    \"$id\",",
									"    \"type\",",
									"    \"default\",",
									"    \"title\",",
									"    \"items\",",
									"    \"examples\"",
									"  ]",
									"};",
									"",
									"/*var actualJsonData = pm.response.json();",
									"",
									"pm.test('Schema is valid', function() {",
									"  ",
									"  pm.expect(tv4.validate(actualJsonData, schema)).to.be.true;",
									"});*/",
									"",
									"",
									"/*var validationResult = tv4.validateMultiple(jsonData, schema);",
									"if (!validationResult.valid) {",
									"    console.log(validationResult.errors);",
									"}",
									"pm.test('schema is valid', function () {",
									"    pm.expect(validationResult.valid).to.be.true;",
									"});*/",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"/*pm.test(\"Response contains valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});*/",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "011bbad4-f72f-4c7a-92c2-e4f9fe37c560",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Fasting Glucose)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bad9543a-a855-45c4-8152-a1f877738dc7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Morbidity properties validation\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach((item) => {",
									"        pm.expect(item.morbidityId).to.be.a('number').and.to.be.at.least(0, \"morbidityId should be a non-negative integer\");",
									"        pm.expect(item.morbidityTestId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestId should be a non-empty string\");",
									"        pm.expect(item.morbidityTestName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestName should be a non-empty string\");",
									"        pm.expect(item.morbidityTestUnit).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestUnit should be a non-empty string\");",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMinVal should be a non-negative integer\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMaxVal should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"pm.test(\"Validate TestName value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestName).to.eql(\"Fasting Glucose\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"pm.test(\"Validate TestUnit\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestUnit).to.eql(\"mg/dL\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"pm.test(\"Validate Min&Max value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityMarkerMinVal).to.eql(100);",
									"    pm.expect(response[0].morbidityMarkerMinVal).to.be.a(\"number\");",
									"    pm.expect(response[0].morbidityMarkerMaxVal).to.eql(125);",
									"    pm.expect(response[0].morbidityMarkerMaxVal).to.be.a(\"number\");",
									"});",
									"",
									"",
									"const schema = {",
									"  ",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    }",
									"  ]",
									"}",
									"pm.test(\"Response contsins valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4b9295a6-f5c9-492e-8f21-1bf5d3f1ce88",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/Fasting Glucose"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Average Glucose)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e87022e8-eb5b-4d79-9ac2-18ebea33886a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Header Validation ,Check if the response has a JSON content type",
									"pm.test(\"content-type header is present\", function(){",
									" pm.response.to.have.header(\"Content-type\");",
									"});",
									"",
									"pm.test(\"Verify response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Morbidity properties validation\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach((item) => {",
									"        pm.expect(item.morbidityId).to.be.a('number').and.to.be.at.least(0, \"morbidityId should be a non-negative integer\");",
									"        pm.expect(item.morbidityTestId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestId should be a non-empty string\");",
									"        pm.expect(item.morbidityTestName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestName should be a non-empty string\");",
									"        pm.expect(item.morbidityTestUnit).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestUnit should be a non-empty string\");",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMinVal should be a non-negative integer\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMaxVal should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"",
									"",
									"pm.test(\"Validate TestName value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestName).to.eql(\"Average Glucose\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"pm.test(\"Validate TestUnit\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestUnit).to.eql(\"mg/dL\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"pm.test(\"Validate Min&Max value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityMarkerMinVal).to.eql(121);",
									"    pm.expect(response[0].morbidityMarkerMinVal).to.be.a(\"number\");",
									"    pm.expect(response[0].morbidityMarkerMaxVal).to.eql(150);",
									"    pm.expect(response[0].morbidityMarkerMaxVal).to.be.a(\"number\");",
									"});",
									"",
									"const schema = {",
									"  ",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    }",
									"  ]",
									"}",
									"pm.test(\"Response contains valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "90c5ab08-e33f-4be6-844a-427bd651bb47",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/Average Glucose"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Plasma Glucose)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93b0622b-9e60-4ac5-b2c0-1dc6021c0bd4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Header Validation ,Check if the response has a JSON content type",
									"pm.test(\"content-type header is present\", function(){",
									" pm.response.to.have.header(\"Content-type\");",
									"});",
									"",
									"pm.test(\"Verify response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Morbidity properties validation\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach((item) => {",
									"        pm.expect(item.morbidityId).to.be.a('number').and.to.be.at.least(0, \"morbidityId should be a non-negative integer\");",
									"        pm.expect(item.morbidityTestId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestId should be a non-empty string\");",
									"        pm.expect(item.morbidityTestName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestName should be a non-empty string\");",
									"        pm.expect(item.morbidityTestUnit).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestUnit should be a non-empty string\");",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMinVal should be a non-negative integer\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMaxVal should be a non-negative integer\");",
									"    });",
									"});",
									"pm.test(\"Validate TestName value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestName).to.eql(\"Plasma Glucose\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"pm.test(\"Validate TestUnit\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestUnit).to.eql(\"mg/dL\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"",
									"pm.test(\"Validate Min&Max value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityMarkerMinVal).to.eql(140);",
									"    pm.expect(response[0].morbidityMarkerMinVal).to.be.a(\"number\");",
									"    pm.expect(response[0].morbidityMarkerMaxVal).to.eql(199);",
									"    pm.expect(response[0].morbidityMarkerMaxVal).to.be.a(\"number\");",
									"});",
									"",
									"",
									"const schema = {",
									"  ",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    }",
									"  ]",
									"}",
									"pm.test(\"Response contains valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a8f0bcfc-f67d-470f-aa16-3f0543883063",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/Plasma Glucose"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(HBA1C)_byDietecian",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55202cd-58c9-497b-a08d-cfc188b2d208",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Header Validation ,Check if the response has a JSON content type",
									"pm.test(\"content-type header is present\", function(){",
									" pm.response.to.have.header(\"Content-type\");",
									"});",
									"",
									"pm.test(\"Verify response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"//Morbidity properties validation",
									"pm.test(\"Morbidity properties validation\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach((item) => {",
									"        pm.expect(item.morbidityId).to.be.a('number').and.to.be.at.least(0, \"morbidityId should be a non-negative integer\");",
									"        pm.expect(item.morbidityTestId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestId should be a non-empty string\");",
									"        pm.expect(item.morbidityTestName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestName should be a non-empty string\");",
									"        pm.expect(item.morbidityTestUnit).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestUnit should be a non-empty string\");",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMinVal should be a non-negative integer\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMaxVal should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"//Validate TestName value and datatype in response",
									"pm.test(\"Validate TestName value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestName).to.eql(\"HbA1c\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"//Validate TestUnit",
									"pm.test(\"Validate TestUnit\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestUnit).to.eql(\"%\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"//Validate Min&Max value and datatype in response",
									"pm.test(\"Validate Min&Max value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityMarkerMinVal).to.eql(5.7);",
									"    pm.expect(response[0].morbidityMarkerMinVal).to.be.a(\"number\");",
									"    pm.expect(response[0].morbidityMarkerMaxVal).to.eql(6.5);",
									"    pm.expect(response[0].morbidityMarkerMaxVal).to.be.a(\"number\");",
									"});",
									"",
									"",
									"const schema = {",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    }",
									"  ]",
									"}",
									"pm.test(\"Response contains valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "49d7f9f2-ed49-4c9e-bfc5-db61b8ec203f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/HBA1C"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Thyroid/TSH)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b40e3f53-dee7-4a8c-9782-292b38e2bb70",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Header Validation ,Check if the response has a JSON content type",
									"pm.test(\"content-type header is present\", function(){",
									" pm.response.to.have.header(\"Content-type\");",
									"});",
									"",
									"pm.test(\"Verify response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"//Morbidity properties validation",
									"pm.test(\"Morbidity properties validation\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach((item) => {",
									"        pm.expect(item.morbidityId).to.be.a('number').and.to.be.at.least(0, \"morbidityId should be a non-negative integer\");",
									"        pm.expect(item.morbidityTestId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestId should be a non-empty string\");",
									"        pm.expect(item.morbidityTestName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestName should be a non-empty string\");",
									"        pm.expect(item.morbidityTestUnit).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestUnit should be a non-empty string\");",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMinVal should be a non-negative integer\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMaxVal should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"//Validate TestName value and datatype in response",
									"pm.test(\"Validate TestName value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestName).to.eql(\"TSH\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"//Validate TestUnit",
									"pm.test(\"Validate Morbidity Test Units\", function () {",
									"    const response = pm.response.json();",
									"    const validUnits = [\"μIU/ml\", \"uIU/ml\", \"mIU/L\"];",
									"",
									"    response.forEach(item => {",
									"        // Check if the unit is valid",
									"        pm.expect(validUnits.includes(item.morbidityTestUnit)).to.be.true;",
									"    });",
									"});",
									"",
									"//Validate Min&Max value and datatype in response",
									"/*pm.test(\"Validate Min & Max values in response\", function () {",
									"    const response = pm.response.json();",
									"",
									"    // expected min and max values",
									"    const expectedValues = {",
									"        5: { min: 0.55, max: 4.78 },",
									"        6: { min: 0.55, max: 4.78 },",
									"        15: { min: 0.45, max: 4.12 }",
									"    };*/",
									"",
									"    pm.test(\"Validate Min & Max Values\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    response.forEach(item => {",
									"        // Validate min and max values are numbers",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a(\"number\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a(\"number\");",
									"",
									"        // checking if min and max values are within a reasonable range",
									"        // Example range: min >= 0 and max <= 1000 ",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.at.least(0);",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.at.most(1000);",
									"    });",
									"});",
									"",
									"const schema = {",
									"  ",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    }",
									"  ]",
									"}",
									"pm.test(\"Response contains valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "18288117-188a-42e4-b4f8-d353d2c08e1f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/TSH"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Thyroid/T3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ce56d6f-d83f-4b6c-97c4-c2ea361641f7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Header Validation ,Check if the response has a JSON content type",
									"pm.test(\"content-type header is present\", function(){",
									" pm.response.to.have.header(\"Content-type\");",
									"});",
									"",
									"pm.test(\"Verify response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"//Morbidity properties validation",
									"pm.test(\"Morbidity properties validation\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach((item) => {",
									"        pm.expect(item.morbidityId).to.be.a('number').and.to.be.at.least(0, \"morbidityId should be a non-negative integer\");",
									"        pm.expect(item.morbidityTestId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestId should be a non-empty string\");",
									"        pm.expect(item.morbidityTestName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestName should be a non-empty string\");",
									"        pm.expect(item.morbidityTestUnit).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestUnit should be a non-empty string\");",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMinVal should be a non-negative integer\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMaxVal should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"//Validate TestName value and datatype in response",
									"pm.test(\"Validate TestName value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestName).to.eql(\"T3\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"//Validate TestUnit",
									"pm.test(\"Validate Morbidity Test Units\", function () {",
									"    const response = pm.response.json();",
									"    const validUnits = [\"ng/dL\", \"ng/mL\", \"pg/mL\", \"nmol/L\"];",
									"",
									"    response.forEach(item => {",
									"        // Check if the unit is valid",
									"        pm.expect(validUnits.includes(item.morbidityTestUnit)).to.be.true;",
									"    });",
									"});",
									"",
									"//Validate Min&Max value and datatype in response",
									" pm.test(\"Validate Min & Max Values\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    response.forEach(item => {",
									"        // Validate min and max values are numbers",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a(\"number\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a(\"number\");",
									"",
									"        // checking if min and max values are within a reasonable range",
									"        // Example range: min >= 0 and max <= 1000 ",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.at.least(0);",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.at.most(1000);",
									"    });",
									"});",
									"",
									"const schema = {",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    }",
									"  ]",
									"}",
									"pm.test(\"Response contains valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "dd96c12c-654b-44ee-a36a-bd907ee17b7d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/T3"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Thyroid/T4)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e2a0e98-7729-4f8d-af3f-f8e31b8551e6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Header Validation ,Check if the response has a JSON content type",
									"pm.test(\"content-type header is present\", function(){",
									" pm.response.to.have.header(\"Content-type\");",
									"});",
									"",
									"pm.test(\"Verify response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"//Morbidity properties validation",
									"pm.test(\"Morbidity properties validation\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach((item) => {",
									"        pm.expect(item.morbidityId).to.be.a('number').and.to.be.at.least(0, \"morbidityId should be a non-negative integer\");",
									"        pm.expect(item.morbidityTestId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestId should be a non-empty string\");",
									"        pm.expect(item.morbidityTestName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestName should be a non-empty string\");",
									"        pm.expect(item.morbidityTestUnit).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestUnit should be a non-empty string\");",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMinVal should be a non-negative integer\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMaxVal should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"//Validate TestName value and datatype in response",
									"pm.test(\"Validate TestName value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestName).to.eql(\"T4\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"//Validate TestUnit",
									"pm.test(\"Validate Morbidity Test Units\", function () {",
									"    const response = pm.response.json();",
									"    const validUnits = [\"μg/dL\", \"ug/dL\", \"ng/dL\"];",
									"",
									"    response.forEach(item => {",
									"        // Check if the unit is valid",
									"        pm.expect(validUnits.includes(item.morbidityTestUnit)).to.be.true;",
									"    });",
									"});",
									"",
									"//Validate Min&Max value and datatype in response",
									" pm.test(\"Validate Min & Max Values\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    response.forEach(item => {",
									"        // Validate min and max values are numbers",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a(\"number\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a(\"number\");",
									"",
									"        // checking if min and max values are within a reasonable range",
									"        // Example range: min >= 0 and max <= 1000 ",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.at.least(0);",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.at.most(1000);",
									"    });",
									"});",
									"",
									"const schema = {",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    }",
									"  ]",
									"}",
									"pm.test(\"Response contains valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "df321cb3-2048-468c-9994-766d30d101b6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/T4"
					},
					"response": []
				},
				{
					"name": "Morbidities_with_valid_Dietician_bearer_token_and_valid_End_point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16a86129-171a-4365-b454-5e830e09a2ef",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Header Validation ,Check if the response has a JSON content type",
									"pm.test(\"content-type header is present\", function(){",
									" pm.response.to.have.header(\"Content-type\");",
									"});",
									"",
									"pm.test(\"Verify response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"//Morbidity properties validation",
									"pm.test(\"Morbidity properties validation\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach((item) => {",
									"        pm.expect(item.morbidityId).to.be.a('number').and.to.be.at.least(0, \"morbidityId should be a non-negative integer\");",
									"        pm.expect(item.morbidityTestId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestId should be a non-empty string\");",
									"        pm.expect(item.morbidityTestName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestName should be a non-empty string\");",
									"        pm.expect(item.morbidityTestUnit).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestUnit should be a non-empty string\");",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMinVal should be a non-negative integer\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMaxVal should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Validate Morbidity Test Fields\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Define valid units and test names",
									"    const validUnits = [\"mg/dL\", \"μIU/ml\", \"uIU/ml\", \"ng/dL\", \"ng/mL\", \"pg/mL\", \"nmol/L\", \"μg/dL\", \"ug/dL\", \"mm Hg\", \"%\"];",
									"    const validTestNames = [\"Fasting Glucose\", \"Average Glucose\", \"Plasma Glucose\", \"HbA1c\", \"TSH\", \"T3\", \"T4\", \"Blood Pressure Levels\"];",
									"    ",
									"    response.forEach(item => {",
									"        // Validate test name",
									"        pm.expect(validTestNames.includes(item.morbidityTestName)).to.be.true;",
									"        ",
									"        // Validate unit",
									"        pm.expect(validUnits.includes(item.morbidityTestUnit)).to.be.true;",
									"        ",
									"        // Validate min and max values",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a(\"number\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a(\"number\");",
									"        ",
									"        // Ensure min value is not greater than max value",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.at.most(item.morbidityMarkerMaxVal);",
									"",
									"    })",
									"   ",
									"});",
									"",
									"const schema = {",
									"  //\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    },",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"morbidityId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"morbidityTestId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityNameRegex\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityTestUnit\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"morbidityMarkerMinVal\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"morbidityMarkerMaxVal\": {",
									"          \"type\": \"number\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"morbidityId\",",
									"        \"morbidityTestId\",",
									"        \"morbidityNameRegex\",",
									"        \"morbidityTestName\",",
									"        \"morbidityTestUnit\",",
									"        \"morbidityMarkerMinVal\",",
									"        \"morbidityMarkerMaxVal\"",
									"      ]",
									"    }",
									"  ]",
									"}",
									"pm.test(\"Response contains valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e754616c-9561-4c60-9a49-bbb8d27d9955",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity"
					},
					"response": []
				},
				{
					"name": "N-Morbidities_with_valid_Dietician_bearer_token_and_Invalid_End_point_Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5365ac73-865b-4227-b808-6d3276d8e827",
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Validate Error and Path\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Validate error field",
									"    pm.expect(response.error).to.eql(\"Unauthorized\");",
									"    ",
									"    // Validate path field",
									"    pm.expect(response.path).to.eql(\"/dietician/morbidit\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "33ee56d2-a3c2-45bf-a8f4-fe59b065f83e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtNEBnbWFpbC5jb20iLCJpYXQiOjE3MjI2MjE4ODIsImV4cCI6MTcyMjY1MDY4Mn0.tntmQ9i9uPNGEesMN_M7_FEz2Keub5IcadCzj5hSbBk0F4SGB80Sh4PJDcBbKKAvXB-7Z0cmalCQ6dnlENGNOg"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidit"
					},
					"response": []
				},
				{
					"name": "N-Morbidities_with_invalid_dietician_bearer_token_and_valid_End_point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3678e32-5dc7-42d8-a935-0951fc2fcfad",
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Validate Error and Path\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Validate error field",
									"    pm.expect(response.error).to.eql(\"Unauthorized\");",
									"    ",
									"    // Validate path field",
									"    pm.expect(response.path).to.eql(\"/dietician/morbidity\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "064b33a1-595b-46fe-8a9b-5fc11ea759f5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtNEBnbWFpbC5jb20iLCJpYXQiOjE3MjI2MjE4ODIsImV4cCI6MTcyMjY1MDY4Mn0.tntmQ9i9uPNGEesMN_M7_FEz2Keub5IcadCzj5hSbBk0F4SGB80Sh4PJDcBbKKAvXB-7Z0cmalCQ6dnlENG"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity"
					},
					"response": []
				},
				{
					"name": "N-Morbidities_with_invalid_dietician_bearer_token_and_invalid_End_point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c564f79a-4368-4c41-b673-101c5fb2f213",
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Validate Error and Path\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Validate error field",
									"    pm.expect(response.error).to.eql(\"Unauthorized\");",
									"    ",
									"    // Validate path field",
									"    pm.expect(response.path).to.eql(\"/dietician/morbi\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8b0517bc-4d15-4a88-8e44-bebea1a63f75",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtNEBnbWFpbC5jb20iLCJpYXQiOjE3MjI2MjE4ODIsImV4cCI6MTcyMjY1MDY4Mn0.tntmQ9i9uPNGEesMN_M7_FEz2Keub5IcadCzj5hSbBk0F4SGB80Sh4PJDcBbKKAvXB-7Z0cmalCQ6dnlENG"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbi"
					},
					"response": []
				},
				{
					"name": "N-Morbidities_without_Dietician_bearer_token_and_valid_End_point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0d5154a-6f5f-4896-bd6a-aedf18dc56a9",
								"exec": [
									"pm.test(\"Response status code is 401\", function () {",
									"  pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Validate Error and Path\", function () {",
									"    const response = pm.response.json();",
									"    ",
									"    // Validate error field",
									"    pm.expect(response.error).to.eql(\"Unauthorized\");",
									"    ",
									"    // Validate path field",
									"    pm.expect(response.path).to.eql(\"/dietician/morbidity\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "bbb804c7-cee3-47c6-84c7-140b3fa0c108",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": ""
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity"
					},
					"response": []
				},
				{
					"name": "N-Delete_PatientByInval-ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3fca5f6a-3fc4-4a98-bfc6-ac3941273341",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27b24560-c302-4674-921d-c0d925891b98",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "20cffdc6-0f7e-484a-889e-708f073a5b1e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{base_URL}}/patient/{{patd}}"
					},
					"response": []
				},
				{
					"name": "N-Delete_PatientByInval-endpt",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5298775c-b9e4-4df4-a706-fcdfeaf8c625",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "67b72e54-41c4-4732-9157-650a761ff802",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "ee669b80-5105-4e14-97d7-d325581f0f21",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{base_URL}}/pat/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "N-Delete_PatientById-noAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85d5ef0e-799e-466f-b4a8-7d736e96b1b5",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5c78bf13-5e96-41b2-b7d3-04128ff457ff",
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"id": "7e10e1bc-f82b-4bfa-b1d0-a742abfb049b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": "{{base_URL}}/patient/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "Delete_PatientById",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87dd2496-6e81-4716-ba83-e7dba4ee700d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6aef159b-84e6-42f2-87cc-66ff0de7d380",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "143a7951-681b-4555-99f5-a58382291da1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{patientId}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{base_URL}}/patient/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "DeletedieticanByNoAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49c5ef69-de46-4a8c-8a6b-fb447e93029e",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "aa68ee76-6657-48c3-96e5-e2f75a4b78c2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": "{{base_URL}}/dietician/{{dieticianId}}"
					},
					"response": [
						{
							"id": "fb2ff4e7-f333-43fd-9c5f-4f4a6d398993",
							"name": "DeletedieticanByNoAuth",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": "{{base_URL}}/dietician/{{dieticianId}}"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722841465&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=A0OOuKG6B2D1ayDdjkKdMYrbMhwJxxWeMlbHaq7bkbA%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722841465&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=A0OOuKG6B2D1ayDdjkKdMYrbMhwJxxWeMlbHaq7bkbA%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 05 Aug 2024 07:04:25 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"timestamp\": \"2024-08-05T07:04:25.254+00:00\",\n    \"status\": 401,\n    \"error\": \"Unauthorized\",\n    \"path\": \"/dietician/dietician/750\"\n}"
						}
					]
				},
				{
					"name": "DeletedieticanByInvdID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf4fd398-c071-4708-a4b8-b0418220cd89",
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "991c95e1-96ed-44ee-ab1e-abe78b611eac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{base_URL}}/dietician/{{132187}}}"
					},
					"response": [
						{
							"id": "82bdf4c3-8777-4536-8275-420079efbffd",
							"name": "DeletedieticanByInvdID",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": "{{base_URL}}/dietician/{{132187}}}"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722841510&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=rXIp6iKZ4B5xUKS78bKqUshBGvodD2u9te260twvWNc%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722841510&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=rXIp6iKZ4B5xUKS78bKqUshBGvodD2u9te260twvWNc%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 05 Aug 2024 07:05:10 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"errorCode\": \"Illegal_Argument\",\n    \"errorMessage\": \"For input string: \\\"{{132187}}}\\\"\"\n}"
						}
					]
				},
				{
					"name": "DeletedieticanByVldID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9dab26ca-83a5-4d4c-ab96-04434d06a4fd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "abc139b1-06b6-40d0-800c-9ba1ccac2efe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{base_URL}}/dietician/{{dieticianId}}"
					},
					"response": []
				},
				{
					"name": "LogoutwithNoAuth",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf0d361c-9f9c-4bdf-956d-def95b37f8b7",
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5cbdb153-832f-4e89-826e-4dae09f4da1d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/logoutdietician"
					},
					"response": []
				},
				{
					"name": "Logoutwithinvalidendpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab9a5dff-9541-48c2-8021-b13005676072",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c664ea98-e140-49d6-8866-88ff38d87664",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/logoutdietician123"
					},
					"response": [
						{
							"id": "9c702e87-91ab-4181-a401-c16b95857ddb",
							"name": "Logoutwithinvalidendpoint",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_URL}}/logoutdietician123"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722841658&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=xSvAsKbOdmBnhj7PhQW3l9hhSqLup6qZ49omfziYP9A%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722841658&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=xSvAsKbOdmBnhj7PhQW3l9hhSqLup6qZ49omfziYP9A%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 05 Aug 2024 07:07:39 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"timestamp\": \"2024-08-05T07:07:39.024+00:00\",\n    \"status\": 404,\n    \"error\": \"Not Found\",\n    \"path\": \"/dietician/logoutdietician123\"\n}"
						}
					]
				},
				{
					"name": "Logoutwithvalidendpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d59360-0f02-4ba7-bd34-423ac0bd4457",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2cb2551c-8cdb-4645-a6e5-30ba2fc8e988",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/logoutdietician"
					},
					"response": []
				}
			],
			"id": "63eadd0b-84d2-47a1-9f83-f26f1d7e107f"
		},
		{
			"name": "New Folder",
			"item": [
				{
					"name": "Admin_login_With_valid_Endpoint Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0f80eff-ad62-4f09-b844-d07c880a9f8b",
								"exec": [
									"var resp = pm.response.json();\r",
									"pm.collectionVariables.set(\"Admin_Token\", resp.token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"loginUserEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"token\",\r",
									"    \"type\",\r",
									"    \"userId\",\r",
									"    \"loginUserEmail\",\r",
									"    \"roles\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response contsins valid schema data\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f69b24d9-269d-4fac-a4d7-702e2f5ce64d",
								"exec": [
									"// if (pm.info.iteration !== 0) { \r",
									"//       pm.execution.skipRequest();\r",
									"// }\r",
									"\r",
									"if (pm.iterationData.get(\"Request\") !== 'CreateRequest') {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "81e51b0e-0d9a-4f76-b2e7-49e00d5021fb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"{{AdminPsw}}\",\r\n    \"userLoginEmail\": \"{{AdminEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/login"
					},
					"response": []
				},
				{
					"name": "CreateDietician Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4ca442d-8e35-488a-8175-1537189fce0d",
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"// pm.test(\"Status code\", function () {\r",
									"  \r",
									"//     pm.expect(pm.response.status).to.eql(pm.iterationData['statuscode'])\r",
									"// });\r",
									"\r",
									"pm.test(\"Status code\", function () {\r",
									"    pm.response.to.have.status(pm.iterationData.get(\"Dieiticanstatuscode\"));\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"dieticianId\",jsonData.id);\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"dieticianPsw\",jsonData.loginPassword);\r",
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"dieticianEmail\",jsonData.Email);\r",
									"\r",
									"//validate mandatory fields are not empty\r",
									"pm.test(\"First name is not empty\", function () {\r",
									"    pm.expect(jsonData.Firstname).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"Last name is not empty\", function () {\r",
									"    pm.expect(jsonData.Lastname).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"Email is not empty\",function(){\r",
									"    pm.expect(jsonData.Email).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"ContactNumber is not empty\",function(){\r",
									"    pm.expect(jsonData.ContactNumber).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"DateOfBirth is not empty\",function(){\r",
									"    pm.expect(jsonData.DateOfBirth).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"Hospital name is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalName).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"HospitalStreet is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalStreet).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"City is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalCity).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"PinCode is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalPinCode).to.be.not.null;\r",
									"});\r",
									"pm.test(\"Education is not empty\",function(){\r",
									"    pm.expect(jsonData.Education).to.be.not.empty;\r",
									"});\r",
									"  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5b4459cc-18af-4817-b3fa-cb0d2835621f",
								"exec": [
									"// pm.collectionVariables.set(\"statuscode\", pm.iterationData.get('Dieiticanstatuscode'));\r",
									"// let statuscode1 = pm.collectionVariables.get(\"Dieiticanstatuscode\");\r",
									"// console.log(statuscode1);\r",
									"\r",
									"if (pm.iterationData.get(\"Request\") !== 'CreateRequest') {\r",
									"    pm.execution.skipRequest();\r",
									"}\r",
									"var emailCounter = pm.collectionVariables.get(\"emailCounter\") || 1;\r",
									"// Increment the counter for the next run\r",
									"emailCounter++;\r",
									"pm.collectionVariables.set(\"emailCounter\", emailCounter )\r",
									"console.log(emailCounter);\r",
									"\r",
									"var phoneCounter = pm.collectionVariables.get(\"phoneCounter\") || 1000;\r",
									"// Increment the counter for the next run\r",
									"phoneCounter++;\r",
									"pm.collectionVariables.set(\"phoneCounter\", phoneCounter )\r",
									"console.log(phoneCounter);\r",
									"\r",
									"var BirthYear = pm.collectionVariables.get(\"BirthYear\") || 1930;\r",
									"// Increment the counter for the next run\r",
									"BirthYear++;\r",
									"pm.collectionVariables.set(\"BirthYear\", BirthYear )\r",
									"console.log(BirthYear);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e40986c2-7c4a-4759-9cba-78efafb31c00",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{contactnumber}}{{phoneCounter}}\",\r\n  \"DateOfBirth\": \"{{BirthYear}}{{Dateofbirth}}\",\r\n  \"Education\": \"{{education}}\",\r\n  \"Email\": \"{{email}}_{{emailCounter}}@gmail.com\",\r\n  \"Firstname\": \"{{firstname}}\",\r\n  \"HospitalCity\": \"{{hospitalcity}}\",\r\n  \"HospitalName\": \"{{hospitalname}}\",\r\n  \"HospitalPincode\": \"{{hospitalpincode}}\",\r\n  \"HospitalStreet\": \"{{hospitalstreet}}\",\r\n  \"Lastname\": \"{{lastname}}\"\r\n \r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/dietician"
					},
					"response": []
				},
				{
					"name": "GetallDietcianinfo Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f5152cc-c416-4357-b128-e61b9666bb92",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"Firstname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"Lastname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ContactNumber\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"DateOfBirth\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"Email\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"Firstname\",\r",
									"        \"Lastname\",\r",
									"        \"ContactNumber\",\r",
									"        \"DateOfBirth\",\r",
									"        \"Email\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"Firstname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"Lastname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ContactNumber\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"DateOfBirth\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"Email\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"HospitalName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"HospitalStreet\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"HospitalCity\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"HospitalPincode\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"Education\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"Firstname\",\r",
									"        \"Lastname\",\r",
									"        \"ContactNumber\",\r",
									"        \"DateOfBirth\",\r",
									"        \"Email\",\r",
									"        \"HospitalName\",\r",
									"        \"HospitalStreet\",\r",
									"        \"HospitalCity\",\r",
									"        \"HospitalPincode\",\r",
									"        \"Education\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response contains valid schema data\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d81bffd2-6805-4e28-936d-0e29a1d3fda5",
								"exec": [
									"// if (!(pm.iterationData.get(\"Dieiticanstatuscode\")== 201 && (pm.iterationData.get(\"Request\") == \"CreateUser\")))\r",
									"//     {\r",
									"//     pm.execution.skipRequest();\r",
									"//     }\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ae67c3d4-d7f9-4185-ac68-bbff49d3b2b2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/dietician"
					},
					"response": []
				},
				{
					"name": "UpdateDietician Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0bc97771-a44d-41e6-8223-3230175e1671",
								"exec": [
									" //pm.collectionVariables.set(\"statuscode\", pm.iterationData.get('statuscode'));\r",
									"// let statuscode1 = pm.collectionVariables.get(\"statuscode\");\r",
									"// console.log(statuscode1);\r",
									"// if ((pm.iterationData.get(\"Dieiticanstatuscode\")== 201 && (pm.iterationData.get(\"Request\") == \"CreateUser\")))\r",
									"//     {\r",
									"//     pm.execution.setNextRequest(\"UpdateDietician Copy\");\r",
									"//     }\r",
									" if (pm.iterationData.get(\"Request\") !== 'UpdateRequest') {\r",
									"    pm.execution.skipRequest();\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9930ae85-9889-442f-8edf-db5e33873f0f",
								"exec": [
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"// pm.test(\"Status code\", function () {\r",
									"  \r",
									"//     pm.expect(pm.response.status).to.eql(pm.iterationData['statuscode'])\r",
									"// });\r",
									"\r",
									"pm.test(\"Status code\", function () {\r",
									"    pm.response.to.have.status(pm.iterationData.get(\"Dieiticanstatuscode\"));\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"//validate mandatory fields are not empty\r",
									"pm.test(\"First name is not empty\", function () {\r",
									"    pm.expect(jsonData.Firstname).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"Last name is not empty\", function () {\r",
									"    pm.expect(jsonData.Lastname).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"Email is not empty\",function(){\r",
									"    pm.expect(jsonData.Email).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"ContactNumber is not empty\",function(){\r",
									"    pm.expect(jsonData.ContactNumber).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"DateOfBirth is not empty\",function(){\r",
									"    pm.expect(jsonData.DateOfBirth).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"Hospital name is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalName).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"HospitalStreet is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalStreet).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"City is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalCity).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"PinCode is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalPinCode).to.be.not.null;\r",
									"});\r",
									"pm.test(\"Education is not empty\",function(){\r",
									"    pm.expect(jsonData.Education).to.be.not.empty;\r",
									"});\r",
									"  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f4cd2029-b2c7-4bb7-8c62-1017289807ec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n  \"ContactNumber\": \"{{contactnumber}}\",\r\n  \"DateOfBirth\": \"{{Dateofbirth}}\",\r\n  \"Education\": \"{{education}}\",\r\n  \"Email\": \"{{email}}\",\r\n  \"Firstname\": \"{{firstname}}\",\r\n  \"HospitalCity\":\" {{hospitalcity}}\",\r\n  \"HospitalName\": \"{{hospitalname}}\",\r\n  \"HospitalPincode\": \"{{hospitalpincode}}\",\r\n  \"HospitalStreet\":\"{{hospitalstreet}}\",\r\n  \"Lastname\": \"{{lastname}}\"\r\n \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/dietician/:id",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"dietician",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{dieticianId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_Dietcian_infoBy_ValidID Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "788fbcac-15be-493b-a37c-6ba5611fac5b",
								"exec": [
									"// Updated assertion to compare response value as a string\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"const schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Firstname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Lastname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ContactNumber\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"DateOfBirth\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"HospitalName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"HospitalStreet\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"HospitalCity\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"HospitalPincode\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Education\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"Firstname\",\r",
									"    \"Lastname\",\r",
									"    \"ContactNumber\",\r",
									"    \"DateOfBirth\",\r",
									"    \"Email\",\r",
									"    \"HospitalName\",\r",
									"    \"HospitalStreet\",\r",
									"    \"HospitalCity\",\r",
									"    \"HospitalPincode\",\r",
									"    \"Education\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response contains valid schema data\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fe8f79f1-f33d-4768-a435-040f23a6caa0",
								"exec": [
									"// console.log(pm.info.iteration, pm.info.iterationCount)\r",
									"// if ( pm.info.iteration < pm.info.iterationCount - 1) {\r",
									"//     pm.execution.skipRequest();\r",
									"// }\r",
									"\r",
									"if (!(pm.iterationData.get(\"Dieiticanstatuscode\")== 200 && (pm.iterationData.get(\"Request\") == \"UpdateRequest\")))\r",
									"    {\r",
									"    pm.execution.skipRequest;\r",
									"    }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "47f2aeff-0c05-41ee-bf57-04e2c4e83d1f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/dietician/{{dieticianId}}"
					},
					"response": []
				},
				{
					"name": "Dietician_login Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0f80eff-ad62-4f09-b844-d07c880a9f8b",
								"exec": [
									"// let resp = pm.response.json();\r",
									"// pm.collectionVariables.set(\"Dietician_Token\", resp.token);\r",
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.resp.to.have.status(200);\r",
									"// });\r",
									"var jsonData = JSON.parse(pm.response.text());\r",
									"pm.collectionVariables.set(\"Dietician_token\", jsonData.token);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"loginUserEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"token\",\r",
									"    \"type\",\r",
									"    \"userId\",\r",
									"    \"loginUserEmail\",\r",
									"    \"roles\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response contains valid schema data\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6237db0f-0e85-4bd1-b186-f4b323ed46cf",
								"exec": [
									"// console.log(pm.info.iteration, pm.info.iterationCount)\r",
									"// if ( pm.info.iteration < pm.info.iterationCount - 1) {\r",
									"//     pm.execution.skipRequest();\r",
									"// }\r",
									"\r",
									"if (pm.iterationData.get(\"Request\") !== 'CreatePatient') {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "155e4e92-81ee-424a-9f7f-9239f90c7b89",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"{{dieticianPsw}}\",\r\n    \"userLoginEmail\": \"{{dieticianEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/login"
					},
					"response": []
				},
				{
					"name": "create_Patient Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9278e75e-9340-4fff-b6c3-27740f54607e",
								"exec": [
									"var response = pm.response.json();",
									"",
									"// Extract the patient ID and email",
									"var patientId = response.patientId;",
									"var patientEmail = response.Email;",
									"",
									"if (pm.response.code === 201) {",
									"    // Set collection variables for later use",
									"    pm.collectionVariables.set(\"patientId\", patientId);",
									"    pm.collectionVariables.set(\"PEmail\", patientEmail);",
									"}",
									"pm.test(\"Status code\", function () {",
									"    pm.response.to.have.status(pm.collectionVariables.get(\"statuscode\"));",
									"});",
									"// Tests to validate response data",
									"pm.test(\"First name is not empty\", function () {",
									"    pm.expect(response.FirstName).to.not.be.empty;",
									"});",
									"pm.test(\"Last name is not empty\", function () {",
									"    pm.expect(response.LastName).to.not.be.empty;",
									"});",
									"pm.test(\"Email is not empty\", function () {",
									"    pm.expect(response.Email).to.not.be.empty;",
									"});",
									"pm.test(\"ContactNumber is not empty\", function () {",
									"    pm.expect(response.ContactNumber).to.not.be.empty;",
									"});",
									"pm.test(\"DateOfBirth is not empty\", function () {",
									"    pm.expect(response.DateOfBirth).to.not.be.empty;",
									"});",
									"pm.test(\"Allergies is not empty\", function () {",
									"    pm.expect(response.Allergy).to.not.be.empty;",
									"});",
									"pm.test(\"CuisineCategory is not empty\", function () {",
									"    pm.expect(response.CuisineCategory).to.not.be.empty;",
									"});",
									"",
									"// Parse the response JSON again for file morbidity",
									"let res = pm.response.json();",
									"",
									"// Extract the fileId from the FileMorbidity object",
									"let fileId = Object.keys(res.FileMorbidity)[0];",
									"",
									"// Save the fileId to a collection variable",
									"pm.collectionVariables.set(\"fileId\", fileId);",
									"",
									"// Optionally, log the fileId to verify",
									"console.log(\"fileId saved to collection variable: \", fileId);",
									"",
									"",
									"var schema = ",
									"{",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"patientId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"FirstName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"LastName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"ContactNumber\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Email\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Allergy\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"FoodPreference\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"CuisineCategory\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"FileMorbidity\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"string\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"HbA1c\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"Average Glucose\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"HbA1c\",",
									"            \"Average Glucose\"",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"string\"",
									"      ]",
									"    },",
									"    \"FileMorbidityCondition\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"string\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"string\"",
									"      ]",
									"    },",
									"    \"DateOfBirth\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"DieticianId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"Vitals\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"string\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"Weight\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"Height\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"Temperature\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"SP\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"DP\": {",
									"              \"type\": \"number\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"Weight\",",
									"            \"Height\",",
									"            \"Temperature\",",
									"            \"SP\",",
									"            \"DP\"",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"string\"",
									"      ]",
									"    },",
									"    \"LastVisitDate\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"patientId\",",
									"    \"FirstName\",",
									"    \"LastName\",",
									"    \"ContactNumber\",",
									"    \"Email\",",
									"    \"Allergy\",",
									"    \"FoodPreference\",",
									"    \"CuisineCategory\",",
									"    \"FileMorbidity\",",
									"    \"FileMorbidityCondition\",",
									"    \"DateOfBirth\",",
									"    \"DieticianId\",",
									"    \"Vitals\",",
									"    \"LastVisitDate\"",
									"  ]",
									"}",
									"",
									"pm.test(\"Response contsins valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27cd307c-b49b-4959-8cf1-5539bdd1082d",
								"exec": [
									"if (pm.iterationData.get(\"Request\") !== 'CreatePatient') {\r",
									"    pm.execution.skipRequest();\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"statuscode\", pm.iterationData.get('statuscode'));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e6e03261-0f13-4037-90bd-6f45b831deaa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"{{Patient_Fname}}\",\n\"LastName\": \"{{Patient_Lname}}\",\n\"ContactNumber\": \"{{Patient_ContactNo}}\",\n\"Email\": \"{{Patient_emailId}}\",\n\"Allergy\": \"{{allergy}}\",\n\"FoodPreference\": \"{{FoodPref}}\",\n\"CuisineCategory\":\"{{Cuisine}}\",\n\"DateOfBirth\": \"{{Patient_DOB}}\"\n}"
								},
								{
									"key": "file",
									"type": "file",
									"src": "5KoNrTaU6/HyperThyroid_Report_final.pdf"
								}
							]
						},
						"url": "{{base_URL}}/patient"
					},
					"response": [
						{
							"id": "9703e9ad-4932-478c-94ac-806f1069271a",
							"name": "New Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"type": "text",
											"value": "{ \"FirstName\": \"h\",\n\"LastName\": \"d\",\n\"ContactNumber\": \"1110000000\",\n\"Email\": \"S124@acbd.com\",\n\"Allergy\": \"Soy\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1988-07-05\"}"
										},
										{
											"key": "file",
											"type": "file",
											"src": "9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
										}
									]
								},
								"url": "{{base_URL}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 04:14:23 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"patientId\": 472,\n    \"FirstName\": \"h\",\n    \"LastName\": \"d\",\n    \"ContactNumber\": \"1110000000\",\n    \"Email\": \"S124@acbd.com\",\n    \"Allergy\": \"Soy\",\n    \"FoodPreference\": \"jain\",\n    \"CuisineCategory\": \"Indian\",\n    \"FileMorbidity\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66adae9f4717cf471aaad21d\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1988-07-05\",\n    \"DieticianId\": 871,\n    \"Vitals\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-03T04:14:23.627+00:00\"\n}"
						},
						{
							"id": "b3bad91e-3ff2-4177-8ccc-95d1431ca10c",
							"name": "New Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"type": "text",
											"value": "{ \"FirstName\": \"h\",\n\"LastName\": \"d\",\n\"ContactNumber\": \"1110000000\",\n\"Email\": \"S124@acbd.com\",\n\"Allergy\": \"Soy\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1988-07-05\"}"
										},
										{
											"key": "file",
											"type": "file",
											"src": "9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
										}
									]
								},
								"url": "{{base_URL}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 04:14:23 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"patientId\": 472,\n    \"FirstName\": \"h\",\n    \"LastName\": \"d\",\n    \"ContactNumber\": \"1110000000\",\n    \"Email\": \"S124@acbd.com\",\n    \"Allergy\": \"Soy\",\n    \"FoodPreference\": \"jain\",\n    \"CuisineCategory\": \"Indian\",\n    \"FileMorbidity\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66adae9f4717cf471aaad21d\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1988-07-05\",\n    \"DieticianId\": 871,\n    \"Vitals\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-03T04:14:23.627+00:00\"\n}"
						}
					]
				},
				{
					"name": "create_Patient Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9278e75e-9340-4fff-b6c3-27740f54607e",
								"exec": [
									"var response = pm.response.json();",
									"",
									"// Extract the patient ID and email",
									"var patientId = response.patientId;",
									"var patientEmail = response.Email;",
									"",
									"if (pm.response.code === 201) {",
									"    // Set collection variables for later use",
									"    pm.collectionVariables.set(\"patientId\", patientId);",
									"    pm.collectionVariables.set(\"PEmail\", patientEmail);",
									"}",
									"pm.test(\"Status code\", function () {",
									"    pm.response.to.have.status(pm.collectionVariables.get(\"statuscode\"));",
									"});",
									"// Tests to validate response data",
									"pm.test(\"First name is not empty\", function () {",
									"    pm.expect(response.FirstName).to.not.be.empty;",
									"});",
									"pm.test(\"Last name is not empty\", function () {",
									"    pm.expect(response.LastName).to.not.be.empty;",
									"});",
									"pm.test(\"Email is not empty\", function () {",
									"    pm.expect(response.Email).to.not.be.empty;",
									"});",
									"pm.test(\"ContactNumber is not empty\", function () {",
									"    pm.expect(response.ContactNumber).to.not.be.empty;",
									"});",
									"pm.test(\"DateOfBirth is not empty\", function () {",
									"    pm.expect(response.DateOfBirth).to.not.be.empty;",
									"});",
									"pm.test(\"Allergies is not empty\", function () {",
									"    pm.expect(response.Allergy).to.not.be.empty;",
									"});",
									"pm.test(\"CuisineCategory is not empty\", function () {",
									"    pm.expect(response.CuisineCategory).to.not.be.empty;",
									"});",
									"",
									"// Parse the response JSON again for file morbidity",
									"let res = pm.response.json();",
									"",
									"// Extract the fileId from the FileMorbidity object",
									"let fileId = Object.keys(res.FileMorbidity)[0];",
									"",
									"// Save the fileId to a collection variable",
									"pm.collectionVariables.set(\"fileId\", fileId);",
									"",
									"// Optionally, log the fileId to verify",
									"console.log(\"fileId saved to collection variable: \", fileId);",
									"",
									"",
									"var schema = ",
									"{",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"patientId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"FirstName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"LastName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"ContactNumber\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Email\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Allergy\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"FoodPreference\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"CuisineCategory\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"FileMorbidity\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"string\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"HbA1c\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"Average Glucose\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"HbA1c\",",
									"            \"Average Glucose\"",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"string\"",
									"      ]",
									"    },",
									"    \"FileMorbidityCondition\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"string\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"string\"",
									"      ]",
									"    },",
									"    \"DateOfBirth\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"DieticianId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"Vitals\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"string\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"Weight\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"Height\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"Temperature\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"SP\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"DP\": {",
									"              \"type\": \"number\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"Weight\",",
									"            \"Height\",",
									"            \"Temperature\",",
									"            \"SP\",",
									"            \"DP\"",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"string\"",
									"      ]",
									"    },",
									"    \"LastVisitDate\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"patientId\",",
									"    \"FirstName\",",
									"    \"LastName\",",
									"    \"ContactNumber\",",
									"    \"Email\",",
									"    \"Allergy\",",
									"    \"FoodPreference\",",
									"    \"CuisineCategory\",",
									"    \"FileMorbidity\",",
									"    \"FileMorbidityCondition\",",
									"    \"DateOfBirth\",",
									"    \"DieticianId\",",
									"    \"Vitals\",",
									"    \"LastVisitDate\"",
									"  ]",
									"}",
									"",
									"pm.test(\"Response contsins valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27cd307c-b49b-4959-8cf1-5539bdd1082d",
								"exec": [
									"if (pm.iterationData.get(\"Request\") !== 'CreatePatient') {\r",
									"    pm.execution.skipRequest();\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"statuscode\", pm.iterationData.get('statuscode'));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2fb550a7-dbf4-4edd-9105-d5d44945910c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"{{firstname}}\",\n\"LastName\": \"{{lastname}}\",\n\"ContactNumber\": \"{{contactnumber}}\",\n\"Email\": \"{{email}}\",\n\"Allergy\": \"{{Allergy}}\",\n\"FoodPreference\": \"{{FoodPref}}\",\n\"CuisineCategory\":\"{{Cuisine}}\",\n\"DateOfBirth\": \"{{Dateofbirth}}\"\n}"
								},
								{
									"key": "file",
									"type": "file",
									"src": "wKxSci8Hj/Hypo Thyroid-Report.pdf (1).pdf"
								}
							]
						},
						"url": "{{base_URL}}/patient"
					},
					"response": [
						{
							"id": "c8f405fb-fe4d-4466-b0b6-6b931b9db5e6",
							"name": "New Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"type": "text",
											"value": "{ \"FirstName\": \"h\",\n\"LastName\": \"d\",\n\"ContactNumber\": \"1110000000\",\n\"Email\": \"S124@acbd.com\",\n\"Allergy\": \"Soy\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1988-07-05\"}"
										},
										{
											"key": "file",
											"type": "file",
											"src": "9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
										}
									]
								},
								"url": "{{base_URL}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 04:14:23 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"patientId\": 472,\n    \"FirstName\": \"h\",\n    \"LastName\": \"d\",\n    \"ContactNumber\": \"1110000000\",\n    \"Email\": \"S124@acbd.com\",\n    \"Allergy\": \"Soy\",\n    \"FoodPreference\": \"jain\",\n    \"CuisineCategory\": \"Indian\",\n    \"FileMorbidity\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66adae9f4717cf471aaad21d\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1988-07-05\",\n    \"DieticianId\": 871,\n    \"Vitals\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-03T04:14:23.627+00:00\"\n}"
						},
						{
							"id": "4dfa7217-a0dc-4c12-9a64-17682ca156e7",
							"name": "New Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"type": "text",
											"value": "{ \"FirstName\": \"h\",\n\"LastName\": \"d\",\n\"ContactNumber\": \"1110000000\",\n\"Email\": \"S124@acbd.com\",\n\"Allergy\": \"Soy\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1988-07-05\"}"
										},
										{
											"key": "file",
											"type": "file",
											"src": "9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
										}
									]
								},
								"url": "{{base_URL}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 04:14:23 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"patientId\": 472,\n    \"FirstName\": \"h\",\n    \"LastName\": \"d\",\n    \"ContactNumber\": \"1110000000\",\n    \"Email\": \"S124@acbd.com\",\n    \"Allergy\": \"Soy\",\n    \"FoodPreference\": \"jain\",\n    \"CuisineCategory\": \"Indian\",\n    \"FileMorbidity\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66adae9f4717cf471aaad21d\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1988-07-05\",\n    \"DieticianId\": 871,\n    \"Vitals\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-03T04:14:23.627+00:00\"\n}"
						}
					]
				},
				{
					"name": "GetAllPatients Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "236a4724-1b09-45be-b81c-61b68ac3a2c6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Check if the response time is less than 500ms",
									"// pm.test(\"Response time is less than 500ms\", function () {",
									"//     pm.expect(pm.response.responseTime).to.be.below(500);",
									"// });",
									"// var schema={",
									"  ",
									"//   \"type\": \"object\",",
									"//   \"properties\": {",
									"//     \"patientId\": {",
									"//       \"type\": \"number\"",
									"//     },",
									"//     \"FirstName\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"LastName\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"ContactNumber\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"Email\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"Allergy\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"FoodPreference\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"CuisineCategory\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"DateOfBirth\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"DieticianId\": {",
									"//       \"type\": \"number\"",
									"//     }",
									"//   },",
									"//   \"required\": [",
									"//     \"patientId\",",
									"//     \"FirstName\",",
									"//     \"LastName\",",
									"//     \"ContactNumber\",",
									"//     \"Email\",",
									"//     \"Allergy\",",
									"//     \"FoodPreference\",",
									"//     \"CuisineCategory\",",
									"//     \"DateOfBirth\",",
									"//     \"DieticianId\"",
									"//   ]",
									"// }",
									"// pm.test(\"Response contsins valid schema data\", function () {",
									"//     pm.response.to.have.jsonSchema(schema);",
									"// });",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "98fa6054-68ad-43db-b43d-0e844ee12c67",
								"exec": [
									"// if (!(pm.collectionVariables.get(\"statuscode\")== 201 && (pm.iterationData.get(\"Request\") == \"CreatePatient\")))\r",
									"//     {\r",
									"//     pm.execution.skipRequest();\r",
									"//     }\r",
									"\r",
									"\r",
									"if (pm.iterationData.get(\"Request\") !== 'CreatePatient') \r",
									"{\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8640814b-751e-4c61-a097-309d18914ff5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/patient"
					},
					"response": [
						{
							"id": "123ef30e-0607-4ad3-9ed3-8602d387ce38",
							"name": "GetAllPatients",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_URL}}/patient"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722658260&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=XeVGK79cmbhC0rPJ%2Fpt9TNzVXVeLOy60cKuH%2FFX%2FLOg%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722658260&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=XeVGK79cmbhC0rPJ%2Fpt9TNzVXVeLOy60cKuH%2FFX%2FLOg%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 04:11:00 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n    {\n        \"patientId\": 468,\n        \"FirstName\": \"h\",\n        \"LastName\": \"d\",\n        \"ContactNumber\": \"1000000000\",\n        \"Email\": \"S124@acbd.com\",\n        \"Allergy\": \"Soy\",\n        \"FoodPreference\": \"jain\",\n        \"CuisineCategory\": \"Indian\",\n        \"FileMorbidity\": {\n            \"66ada9f04717cf471aaad20c\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            }\n        },\n        \"FileMorbidityCondition\": {\n            \"66ada9f04717cf471aaad20c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n        },\n        \"DateOfBirth\": \"1988-07-08\",\n        \"DieticianId\": 871,\n        \"Vitals\": {\n            \"66ada9f04717cf471aaad20c\": {\n                \"Weight\": 0,\n                \"Height\": 0,\n                \"Temperature\": 0,\n                \"SP\": 0,\n                \"DP\": 0\n            }\n        },\n        \"LastVisitDate\": \"2024-08-03T03:54:24.117+00:00\"\n    }\n]"
						}
					]
				},
				{
					"name": "update_Patient Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9278e75e-9340-4fff-b6c3-27740f54607e",
								"exec": [
									"var response = pm.response.json();",
									"",
									"// Extract the patient ID and email",
									"var patientId = response.patientId;",
									"var patientEmail = response.Email;",
									"",
									"if (pm.response.code === 201) {",
									"    // Set collection variables for later use",
									"    pm.collectionVariables.set(\"patientId\", patientId);",
									"    pm.collectionVariables.set(\"PEmail\", patientEmail);",
									"}",
									"",
									"// Tests to validate response data",
									"pm.test(\"First name is not empty\", function () {",
									"    pm.expect(response.FirstName).to.not.be.empty;",
									"});",
									"pm.test(\"Last name is not empty\", function () {",
									"    pm.expect(response.LastName).to.not.be.empty;",
									"});",
									"pm.test(\"Email is not empty\", function () {",
									"    pm.expect(response.Email).to.not.be.empty;",
									"});",
									"pm.test(\"ContactNumber is not empty\", function () {",
									"    pm.expect(response.ContactNumber).to.not.be.empty;",
									"});",
									"pm.test(\"DateOfBirth is not empty\", function () {",
									"    pm.expect(response.DateOfBirth).to.not.be.empty;",
									"});",
									"pm.test(\"Allergies is not empty\", function () {",
									"    pm.expect(response.Allergy).to.not.be.empty;",
									"});",
									"pm.test(\"CuisineCategory is not empty\", function () {",
									"    pm.expect(response.CuisineCategory).to.not.be.empty;",
									"});",
									"",
									"// Parse the response JSON again for file morbidity",
									"let res = pm.response.json();",
									"",
									"// Extract the fileId from the FileMorbidity object",
									"let fileId = Object.keys(res.FileMorbidity)[0];",
									"",
									"// Save the fileId to a collection variable",
									"pm.collectionVariables.set(\"fileId\", fileId);",
									"",
									"// Optionally, log the fileId to verify",
									"console.log(\"fileId saved to collection variable: \", fileId);",
									"",
									"",
									"var schema = ",
									"  {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"patientId\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"FirstName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"LastName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"ContactNumber\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Email\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Allergy\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"FoodPreference\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"CuisineCategory\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"FileMorbidity\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"66b1493c2e7ba525786166e5\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"T3\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"T4\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"TSH\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"T3\",",
									"            \"T4\",",
									"            \"TSH\"",
									"          ]",
									"        },",
									"        \"66b1493c2e7ba525786166e9\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"HbA1c\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"Average Glucose\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"HbA1c\",",
									"            \"Average Glucose\"",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"66b1493c2e7ba525786166e5\",",
									"        \"66b1493c2e7ba525786166e9\"",
									"      ]",
									"    },",
									"    \"FileMorbidityCondition\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"66b1493c2e7ba525786166e5\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"66b1493c2e7ba525786166e9\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"66b1493c2e7ba525786166e5\",",
									"        \"66b1493c2e7ba525786166e9\"",
									"      ]",
									"    },",
									"    \"DateOfBirth\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"DieticianId\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"Vitals\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"66b1493c2e7ba525786166e5\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"Weight\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"Height\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"Temperature\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"SP\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"DP\": {",
									"              \"type\": \"integer\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"Weight\",",
									"            \"Height\",",
									"            \"Temperature\",",
									"            \"SP\",",
									"            \"DP\"",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"66b1493c2e7ba525786166e5\"",
									"      ]",
									"    },",
									"    \"LastVisitDate\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"patientId\",",
									"    \"FirstName\",",
									"    \"LastName\",",
									"    \"ContactNumber\",",
									"    \"Email\",",
									"    \"Allergy\",",
									"    \"FoodPreference\",",
									"    \"CuisineCategory\",",
									"    \"FileMorbidity\",",
									"    \"FileMorbidityCondition\",",
									"    \"DateOfBirth\",",
									"    \"DieticianId\",",
									"    \"Vitals\",",
									"    \"LastVisitDate\"",
									"  ]",
									"}",
									"",
									"pm.test(\"Response contsins valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27cd307c-b49b-4959-8cf1-5539bdd1082d",
								"exec": [
									"// if (pm.iterationData.get(\"Request\") !== 'UpdatePatient') {\r",
									"//     pm.execution.skipRequest();\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "96ab74db-5efb-4381-911d-352a5c61f0aa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"{{Patient_Fname}}\",\n\"LastName\": \"{{Patient_Lname}}\",\n\"ContactNumber\": \"{{Patient_ContactNo}}\",\n\"Email\": \"{{Patient_emailId}}\",\n\"Allergy\": \"{{allergy}}\",\n\"FoodPreference\": \"{{FoodPref}}\",\n\"CuisineCategory\":\"{{Cuisine}}\",\n\"DateOfBirth\": \"{{Patient_DOB}}\"\n}"
								},
								{
									"key": "file",
									"type": "file",
									"src": "9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
								}
							]
						},
						"url": "{{base_URL}}/patient/{{patientId}}"
					},
					"response": [
						{
							"id": "02ef0ac9-a182-4832-a660-a82a3a9713aa",
							"name": "New Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"type": "text",
											"value": "{ \"FirstName\": \"h\",\n\"LastName\": \"d\",\n\"ContactNumber\": \"1110000000\",\n\"Email\": \"S124@acbd.com\",\n\"Allergy\": \"Soy\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1988-07-05\"}"
										},
										{
											"key": "file",
											"type": "file",
											"src": "9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
										}
									]
								},
								"url": "{{base_URL}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 04:14:23 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"patientId\": 472,\n    \"FirstName\": \"h\",\n    \"LastName\": \"d\",\n    \"ContactNumber\": \"1110000000\",\n    \"Email\": \"S124@acbd.com\",\n    \"Allergy\": \"Soy\",\n    \"FoodPreference\": \"jain\",\n    \"CuisineCategory\": \"Indian\",\n    \"FileMorbidity\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66adae9f4717cf471aaad21d\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1988-07-05\",\n    \"DieticianId\": 871,\n    \"Vitals\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-03T04:14:23.627+00:00\"\n}"
						}
					]
				},
				{
					"name": "update_Patient Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9278e75e-9340-4fff-b6c3-27740f54607e",
								"exec": [
									"var response = pm.response.json();",
									"",
									"// Extract the patient ID and email",
									"var patientId = response.patientId;",
									"var patientEmail = response.Email;",
									"",
									"if (pm.response.code === 201) {",
									"    // Set collection variables for later use",
									"    pm.collectionVariables.set(\"patientId\", patientId);",
									"    pm.collectionVariables.set(\"PEmail\", patientEmail);",
									"}",
									"",
									"// Tests to validate response data",
									"pm.test(\"First name is not empty\", function () {",
									"    pm.expect(response.FirstName).to.not.be.empty;",
									"});",
									"pm.test(\"Last name is not empty\", function () {",
									"    pm.expect(response.LastName).to.not.be.empty;",
									"});",
									"pm.test(\"Email is not empty\", function () {",
									"    pm.expect(response.Email).to.not.be.empty;",
									"});",
									"pm.test(\"ContactNumber is not empty\", function () {",
									"    pm.expect(response.ContactNumber).to.not.be.empty;",
									"});",
									"pm.test(\"DateOfBirth is not empty\", function () {",
									"    pm.expect(response.DateOfBirth).to.not.be.empty;",
									"});",
									"pm.test(\"Allergies is not empty\", function () {",
									"    pm.expect(response.Allergy).to.not.be.empty;",
									"});",
									"pm.test(\"CuisineCategory is not empty\", function () {",
									"    pm.expect(response.CuisineCategory).to.not.be.empty;",
									"});",
									"",
									"// Parse the response JSON again for file morbidity",
									"let res = pm.response.json();",
									"",
									"// Extract the fileId from the FileMorbidity object",
									"let fileId = Object.keys(res.FileMorbidity)[0];",
									"",
									"// Save the fileId to a collection variable",
									"pm.collectionVariables.set(\"fileId\", fileId);",
									"",
									"// Optionally, log the fileId to verify",
									"console.log(\"fileId saved to collection variable: \", fileId);",
									"",
									"",
									"var schema = ",
									"  {",
									" // \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"patientId\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"FirstName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"LastName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"ContactNumber\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Email\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Allergy\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"FoodPreference\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"CuisineCategory\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"FileMorbidity\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"66b1493c2e7ba525786166e5\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"T3\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"T4\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"TSH\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"T3\",",
									"            \"T4\",",
									"            \"TSH\"",
									"          ]",
									"        },",
									"        \"66b1493c2e7ba525786166e9\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"HbA1c\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"Average Glucose\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"HbA1c\",",
									"            \"Average Glucose\"",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"66b1493c2e7ba525786166e5\",",
									"        \"66b1493c2e7ba525786166e9\"",
									"      ]",
									"    },",
									"    \"FileMorbidityCondition\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"66b1493c2e7ba525786166e5\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"66b1493c2e7ba525786166e9\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"66b1493c2e7ba525786166e5\",",
									"        \"66b1493c2e7ba525786166e9\"",
									"      ]",
									"    },",
									"    \"DateOfBirth\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"DieticianId\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"Vitals\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"66b1493c2e7ba525786166e5\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"Weight\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"Height\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"Temperature\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"SP\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"DP\": {",
									"              \"type\": \"integer\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"Weight\",",
									"            \"Height\",",
									"            \"Temperature\",",
									"            \"SP\",",
									"            \"DP\"",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"66b1493c2e7ba525786166e5\"",
									"      ]",
									"    },",
									"    \"LastVisitDate\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"patientId\",",
									"    \"FirstName\",",
									"    \"LastName\",",
									"    \"ContactNumber\",",
									"    \"Email\",",
									"    \"Allergy\",",
									"    \"FoodPreference\",",
									"    \"CuisineCategory\",",
									"    \"FileMorbidity\",",
									"    \"FileMorbidityCondition\",",
									"    \"DateOfBirth\",",
									"    \"DieticianId\",",
									"    \"Vitals\",",
									"    \"LastVisitDate\"",
									"  ]",
									"}",
									"",
									"pm.test(\"Response contsins valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27cd307c-b49b-4959-8cf1-5539bdd1082d",
								"exec": [
									"if (pm.iterationData.get(\"Request\") !== 'UpdatePatient') {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b551ff26-da3d-42c5-958b-64d9ab396a34",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"{{firstname}}\",\n\"LastName\": \"{{lastname}}\",\n\"ContactNumber\": \"{{contactnumber}}\",\n\"Email\": \"{{email}}\",\n\"Allergy\": \"{{Allergy}}\",\n\"FoodPreference\": \"{{FoodPref}}\",\n\"CuisineCategory\":\"{{Cuisine}}\",\n\"DateOfBirth\": \"{{Dateofbirth}}\"\n}"
								},
								{
									"key": "file",
									"type": "file",
									"src": "_R7wRVBwO/HyperThyroid_Report_final.pdf"
								}
							]
						},
						"url": "{{base_URL}}/patient/{{patientId}}"
					},
					"response": [
						{
							"id": "502e8074-77eb-4b21-852d-468dce57df11",
							"name": "New Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"type": "text",
											"value": "{ \"FirstName\": \"h\",\n\"LastName\": \"d\",\n\"ContactNumber\": \"1110000000\",\n\"Email\": \"S124@acbd.com\",\n\"Allergy\": \"Soy\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1988-07-05\"}"
										},
										{
											"key": "file",
											"type": "file",
											"src": "9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
										}
									]
								},
								"url": "{{base_URL}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 04:14:23 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"patientId\": 472,\n    \"FirstName\": \"h\",\n    \"LastName\": \"d\",\n    \"ContactNumber\": \"1110000000\",\n    \"Email\": \"S124@acbd.com\",\n    \"Allergy\": \"Soy\",\n    \"FoodPreference\": \"jain\",\n    \"CuisineCategory\": \"Indian\",\n    \"FileMorbidity\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66adae9f4717cf471aaad21d\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1988-07-05\",\n    \"DieticianId\": 871,\n    \"Vitals\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-03T04:14:23.627+00:00\"\n}"
						}
					]
				},
				{
					"name": "UpdateAddNewReprtsWithVital Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da827469-56e0-438e-83dd-5441a9581a42",
								"exec": [
									"const response = pm.response.json();",
									"",
									"// // Extract the program name and program status",
									" const patientId = response.patientId;",
									"",
									" if (pm.response.code === 200) {",
									"   // Set collection variables for later use",
									"pm.collectionVariables.set(\"patientId\", patientId);",
									" }",
									" console.log(\"patientId\", patientId);",
									"//Before storing collection variable validating",
									"pm.test(\"patientId is stored as a collection variable\", function () {",
									"    pm.expect(pm.collectionVariables.get(\"patientId\")).to.eql(patientId);",
									"});",
									"pm.test(\"First name is not empty\", function () {",
									"    pm.expect(response.FirstName).to.not.be.empty;",
									"});",
									"pm.test(\"Last name is not empty\", function () {",
									"    pm.expect(response.LastName).to.not.be.empty;",
									"});",
									"pm.test(\"Email is not empty\",function(){",
									"    pm.expect(response.Email).to.be.not.empty;",
									"});",
									"pm.test(\"ContactNumber is not empty\",function(){",
									"    pm.expect(response.ContactNumber).to.be.not.empty;",
									"});",
									"pm.test(\"DateOfBirth is not empty\",function(){",
									"    pm.expect(response.DateOfBirth).to.be.not.empty;",
									"});",
									"pm.test(\"Allergies is not empty\",function(){",
									"    pm.expect(response.Allergy).to.be.not.empty;",
									"});",
									"",
									"pm.test(\"CuisineCategory is not empty\",function(){",
									"    pm.expect(response.CuisineCategory).to.be.not.empty;",
									"});",
									"// Parse the response JSON",
									"let res = pm.response.json();",
									"",
									"// Extract the fileId",
									"let fileId = Object.keys(res.FileMorbidity)[0];",
									"",
									"// Save the fileId to a collection variable",
									"pm.collectionVariables.set(\"fileId\", fileId);",
									"",
									"// Optionally, log the fileId to verify",
									"console.log(\"fileId saved to collection variable: \", fileId);",
									"",
									"// Check if the response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Check if the response has a JSON content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									"",
									"// const schema = {",
									"//     \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"//     \"type\": \"object\",",
									"//     \"properties\": {",
									"//         \"patientId\": {",
									"//             \"type\": \"integer\"",
									"//         },",
									"//         \"FirstName\": {",
									"//             \"type\": \"string\"",
									"//         },",
									"//         \"LastName\": {",
									"//             \"type\": \"string\"",
									"//         },",
									"//         \"ContactNumber\": {",
									"//             \"type\": \"string\",",
									"//             \"pattern\": \"^\\\\d{10}$\"",
									"//         },",
									"//         \"Email\": {",
									"//             \"type\": \"string\",",
									"//             \"format\": \"email\"",
									"//         },",
									"//         \"Allergy\": {",
									"//             \"type\": \"string\"",
									"//         },",
									"//         \"FoodPreference\": {",
									"//             \"type\": \"string\"",
									"//         },",
									"//         \"CuisineCategory\": {",
									"//             \"type\": \"string\"",
									"//         },",
									"//         \"FileMorbidity\": {",
									"//             \"type\": \"object\",",
									"//             \"patternProperties\": {",
									"//                 \"^[a-fA-F0-9]{24}$\": {",
									"//                     \"type\": \"object\",",
									"//                     \"properties\": {",
									"//                         \"HbA1c\": {",
									"//                             \"type\": \"string\"",
									"//                         },",
									"//                         \"Average Glucose\": {",
									"//                             \"type\": \"string\"",
									"//                         }",
									"//                     },",
									"//                     \"required\": [\"HbA1c\", \"Average Glucose\"]",
									"//                 }",
									"//             }",
									"//         },",
									"//         \"FileMorbidityCondition\": {",
									"//             \"type\": \"object\",",
									"//             \"patternProperties\": {",
									"//                 \"^[a-fA-F0-9]{24}$\": {",
									"//                     \"type\": \"string\"",
									"//                 }",
									"//             }",
									"//         },",
									"//         \"DateOfBirth\": {",
									"//             \"type\": \"string\",",
									"//             \"format\": \"date\"",
									"//         },",
									"//         \"DieticianId\": {",
									"//             \"type\": \"integer\"",
									"//         },",
									"//         \"Vitals\": {",
									"//             \"type\": \"object\",",
									"//             \"patternProperties\": {",
									"//                 \"^[a-fA-F0-9]{24}$\": {",
									"//                     \"type\": \"object\",",
									"//                     \"properties\": {",
									"//                         \"Weight\": {",
									"//                             \"type\": \"number\"",
									"//                         },",
									"//                         \"Height\": {",
									"//                             \"type\": \"number\"",
									"//                         },",
									"//                         \"Temperature\": {",
									"//                             \"type\": \"number\"",
									"//                         },",
									"//                         \"SP\": {",
									"//                             \"type\": \"integer\"",
									"//                         },",
									"//                         \"DP\": {",
									"//                             \"type\": \"integer\"",
									"//                         }",
									"//                     },",
									"//                     \"required\": [\"Weight\", \"Height\", \"Temperature\", \"SP\", \"DP\"]",
									"//                 }",
									"//             }",
									"//         },",
									"//         \"LastVisitDate\": {",
									"//             \"type\": \"string\",",
									"//             \"format\": \"date-time\"",
									"//         }",
									"//     },",
									"//     \"required\": [\"patientId\", \"FirstName\", \"LastName\", \"ContactNumber\", \"Email\", \"Allergy\", \"FoodPreference\", \"CuisineCategory\", \"FileMorbidity\", \"FileMorbidityCondition\", \"DateOfBirth\", \"DieticianId\", \"Vitals\", \"LastVisitDate\"]",
									"// }",
									"// pm.test(\"Schema is valid\", function () {",
									"//     pm.response.to.have.jsonSchema(schema);",
									"// });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "623a8a27-1404-482e-ada2-fc96b1d6461f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"setebcr\",\n\"LastName\": \"sdetyze\",\n\"ContactNumber\": \"9193656789\",\n\"Email\": \"asddetb1@gmail.com\",\n\"Allergy\": \"PECAN\",\n\"FoodPreference\": \"Vegan\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1985-12-14\"\n}\n"
								},
								{
									"key": "Reports",
									"type": "file",
									"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
									"filesNotInWorkingDirectory": [
										"_DuXivL8A/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
									],
									"src": "_DuXivL8A/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "vitals",
									"value": "{\n       “Weight“ : 45.0,\n       “Height” : 5.5,\n        “Temperature” : 99.0,\n        “SP” : 4,\n        “DP” : 5\n \n             \t}\n",
									"type": "text"
								}
							]
						},
						"url": "{{base_URL}}/patient/newReports/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "UpdateAddNewReprtswithoutVital",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da827469-56e0-438e-83dd-5441a9581a42",
								"exec": [
									"const response = pm.response.json();",
									"",
									"// // Extract the program name and program status",
									" const patientId = response.patientId;",
									"",
									" if (pm.response.code === 200) {",
									"   // Set collection variables for later use",
									"pm.collectionVariables.set(\"patientId\", patientId);",
									" }",
									" console.log(\"patientId\", patientId);",
									"//Before storing collection variable validating",
									"pm.test(\"patientId is stored as a collection variable\", function () {",
									"    pm.expect(pm.collectionVariables.get(\"patientId\")).to.eql(patientId);",
									"});",
									"pm.test(\"First name is not empty\", function () {",
									"    pm.expect(jsonData.FirstName).to.not.be.empty;",
									"});",
									"pm.test(\"Last name is not empty\", function () {",
									"    pm.expect(jsonData.LastName).to.not.be.empty;",
									"});",
									"pm.test(\"Email is not empty\",function(){",
									"    pm.expect(jsonData.Email).to.be.not.empty;",
									"});",
									"pm.test(\"ContactNumber is not empty\",function(){",
									"    pm.expect(jsonData.ContactNumber).to.be.not.empty;",
									"});",
									"pm.test(\"DateOfBirth is not empty\",function(){",
									"    pm.expect(jsonData.DateOfBirth).to.be.not.empty;",
									"});",
									"pm.test(\"Allergies is not empty\",function(){",
									"    pm.expect(jsonData.Allergy).to.be.not.empty;",
									"});",
									"",
									"pm.test(\"CuisineCategory is not empty\",function(){",
									"    pm.expect(jsonData.CuisineCategory).to.be.not.empty;",
									"});",
									"// Parse the response JSON",
									"let res = pm.response.json();",
									"",
									"// Extract the fileId",
									"let fileId = Object.keys(res.FileMorbidity)[0];",
									"",
									"// Save the fileId to a collection variable",
									"pm.collectionVariables.set(\"fileId\", fileId);",
									"",
									"// Optionally, log the fileId to verify",
									"console.log(\"fileId saved to collection variable: \", fileId);",
									"",
									"// Check if the response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Check if the response has a JSON content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", /application/json);",
									"});",
									"",
									"const schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"patientId\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"FirstName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"LastName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"ContactNumber\": {",
									"            \"type\": \"string\",",
									"            \"pattern\": \"^\\\\d{10}$\"",
									"        },",
									"        \"Email\": {",
									"            \"type\": \"string\",",
									"            \"format\": \"email\"",
									"        },",
									"        \"Allergy\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"FoodPreference\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"CuisineCategory\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"FileMorbidity\": {",
									"            \"type\": \"object\",",
									"            \"patternProperties\": {",
									"                \"^[a-fA-F0-9]{24}$\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"HbA1c\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                        \"Average Glucose\": {",
									"                            \"type\": \"string\"",
									"                        }",
									"                    },",
									"                    \"required\": [\"HbA1c\", \"Average Glucose\"]",
									"                }",
									"            }",
									"        },",
									"        \"FileMorbidityCondition\": {",
									"            \"type\": \"object\",",
									"            \"patternProperties\": {",
									"                \"^[a-fA-F0-9]{24}$\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            }",
									"        },",
									"        \"DateOfBirth\": {",
									"            \"type\": \"string\",",
									"            \"format\": \"date\"",
									"        },",
									"        \"DieticianId\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"Vitals\": {",
									"            \"type\": \"object\",",
									"            \"patternProperties\": {",
									"                \"^[a-fA-F0-9]{24}$\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"Weight\": {",
									"                            \"type\": \"number\"",
									"                        },",
									"                        \"Height\": {",
									"                            \"type\": \"number\"",
									"                        },",
									"                        \"Temperature\": {",
									"                            \"type\": \"number\"",
									"                        },",
									"                        \"SP\": {",
									"                            \"type\": \"integer\"",
									"                        },",
									"                        \"DP\": {",
									"                            \"type\": \"integer\"",
									"                        }",
									"                    },",
									"                    \"required\": [\"Weight\", \"Height\", \"Temperature\", \"SP\", \"DP\"]",
									"                }",
									"            }",
									"        },",
									"        \"LastVisitDate\": {",
									"            \"type\": \"string\",",
									"            \"format\": \"date-time\"",
									"        }",
									"    },",
									"    \"required\": [\"patientId\", \"FirstName\", \"LastName\", \"ContactNumber\", \"Email\", \"Allergy\", \"FoodPreference\", \"CuisineCategory\", \"FileMorbidity\", \"FileMorbidityCondition\", \"DateOfBirth\", \"DieticianId\", \"Vitals\", \"LastVisitDate\"]",
									"}",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "bc3b14fc-7c4c-4257-8e4e-9855f8ce0ddf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"{{fname}}\",\n\"LastName\": \"{{lname}}\",\n\"ContactNumber\": \"{{contactno}}\",\n\"Email\": \"{{pemail}}\",\n\"Allergy\": \"{{allergy}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisine}}\",\n\"DateOfBirth\": \"{{dob}}\"\n}"
								},
								{
									"key": "Reports",
									"type": "file",
									"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
									"filesNotInWorkingDirectory": [
										"_DuXivL8A/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
									],
									"src": "_DuXivL8A/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								}
							]
						},
						"url": "{{base_URL}}/patient/newReports/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "GetOperatioRetrievePatientfilebyFileId Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e8e1614-eb68-476c-9e46-7fbbcff663c5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Check if the response has a JSON content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", /application/json);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "18f35a46-9c66-4ccd-b567-2c79a99718df",
								"exec": [
									"console.log(pm.info.iteration, pm.info.iterationCount)\r",
									"if ( pm.info.iteration < pm.info.iterationCount - 1) {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0967ae88-4e7a-474f-b6c7-69d3dc810489",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/patient/testReports/viewFile/{{fileId}}"
					},
					"response": []
				},
				{
					"name": "GetPatientsMorbidityDetails Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e55a389-9817-4d76-9659-104ef45848b6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Check if the response has a JSON content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", /application/json);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e62f405-b007-4ecf-8294-bcc622ffde43",
								"exec": [
									"console.log(pm.info.iteration, pm.info.iterationCount)\r",
									"if ( pm.info.iteration < pm.info.iterationCount - 1) {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c4ec3791-838d-45c6-a423-1a05677ecbd7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/patient/testReports/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Fasting Glucose)_byDietecian Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55202cd-58c9-497b-a08d-cfc188b2d208",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"/*pm.test(\"Verify response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Morbidity properties validation\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach((item) => {",
									"        pm.expect(item.morbidityId).to.be.a('number').and.to.be.at.least(0, \"morbidityId should be a non-negative integer\");",
									"        pm.expect(item.morbidityTestId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestId should be a non-empty string\");",
									"        pm.expect(item.morbidityTestName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestName should be a non-empty string\");",
									"        pm.expect(item.morbidityTestUnit).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestUnit should be a non-empty string\");",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMinVal should be a non-negative integer\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMaxVal should be a non-negative integer\");",
									"    });",
									"});*/",
									"",
									"",
									"",
									"",
									"pm.test(\"Validate TestName value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestName).to.eql(\"Fasting Glucose\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"pm.test(\"Validate Min&Max value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityMarkerMinVal).to.eql(100);",
									"    pm.expect(response[0].morbidityMarkerMinVal).to.be.a(\"number\");",
									"    pm.expect(response[0].morbidityMarkerMaxVal).to.eql(125);",
									"    pm.expect(response[0].morbidityMarkerMaxVal).to.be.a(\"number\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1bf484c0-06db-497b-86f7-f837d29e7225",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/Fasting Glucose"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Plasma Glucose)_byDietecian Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55202cd-58c9-497b-a08d-cfc188b2d208",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "df764c1f-f88d-4950-9aff-a9ff60b5a5ad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/Plasma Glucose"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Average Glucose)_byDietecian Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55202cd-58c9-497b-a08d-cfc188b2d208",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e4e428e7-ef38-4b39-ae0e-2951af2c7a87",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/Average Glucose"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Thyroid/TSH)_byDietecian Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55202cd-58c9-497b-a08d-cfc188b2d208",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1c19749f-1883-43f4-924a-2af8ded8c2d8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/TSH"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Thyroid/T3)_byDietecian Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55202cd-58c9-497b-a08d-cfc188b2d208",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d971d890-d6ac-4011-b7c9-b4e4fc80fc8a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/T3"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Thyroid/T4)_byDietecian Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55202cd-58c9-497b-a08d-cfc188b2d208",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3c8643ce-a6f7-42c9-b3a1-513d1a859030",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/T4"
					},
					"response": []
				},
				{
					"name": "PatientLogin Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9358130-83db-438b-9666-63266689214a",
								"exec": [
									"let resp = pm.response.json();\r",
									"let Patient_token=resp.token;\r",
									"if (pm.response.code === 200 ) {\r",
									"   // Set collection variables for later use\r",
									"pm.collectionVariables.set(\"Patient_Token\", Patient_token);\r",
									" }\r",
									"//pm.collectionVariables.set(\"Patient_Token\", resp.token);\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.resp.to.have.status(200);\r",
									"});\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"loginUserEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"token\",\r",
									"    \"type\",\r",
									"    \"userId\",\r",
									"    \"loginUserEmail\",\r",
									"    \"roles\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response contsins valid schema data\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7ab1ad30-61a6-4b9a-ad5f-99f7d44b0ae0",
								"exec": [
									"// if (pm.info.iteration !== 0) { \r",
									"//       pm.execution.skipRequest();\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f1f269b3-58cf-414e-8908-3306c90e32fe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"{{patientPsw}}\",\r\n    \"userLoginEmail\": \"{{Patientemail}}\"\r\n   \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/login"
					},
					"response": []
				},
				{
					"name": "GetPatientfilebyFileId Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e8e1614-eb68-476c-9e46-7fbbcff663c5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Check if the response has a JSON content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", /application/json);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "18f35a46-9c66-4ccd-b567-2c79a99718df",
								"exec": [
									"console.log(pm.info.iteration, pm.info.iterationCount)\r",
									"if ( pm.info.iteration < pm.info.iterationCount - 1) {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "863ca400-9eeb-4650-9c95-f4d48dcc5ab5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/patient/testReports/viewFile/{{fileId}}"
					},
					"response": []
				},
				{
					"name": "GetPatientsMorbidityDetails Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e55a389-9817-4d76-9659-104ef45848b6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Check if the response has a JSON content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", /application/json);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e62f405-b007-4ecf-8294-bcc622ffde43",
								"exec": [
									"console.log(pm.info.iteration, pm.info.iterationCount)\r",
									"if ( pm.info.iteration < pm.info.iterationCount - 1) {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f34e6cf8-f7ee-46f3-9d13-c6fa76db2dfd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/patient/testReports/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "Delete_PatientById Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87dd2496-6e81-4716-ba83-e7dba4ee700d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6aef159b-84e6-42f2-87cc-66ff0de7d380",
								"exec": [
									"if (pm.iterationData.get(\"Request\") !== 'UpdatePatient') {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a5ebebd6-2afa-4015-86d4-88cfb986633c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_URL}}/patient/:id",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"patient",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1493"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeletedieticanByVldID Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9dab26ca-83a5-4d4c-ab96-04434d06a4fd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0519ca1-3df5-4214-a409-4524f0ec4946",
								"exec": [
									"if (pm.iterationData.get(\"Request\") !== 'UpdateRequest') {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "41b84fef-6d5b-4cce-9afd-582cc0de9ad9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/dietician/{{dieticianId}}"
					},
					"response": []
				},
				{
					"name": "Logoutwithvalidendpoint Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d59360-0f02-4ba7-bd34-423ac0bd4457",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9c4b927e-0369-471d-a53d-c4bc03a78b75",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/logoutdietician"
					},
					"response": []
				}
			],
			"id": "4107a1e1-80d4-4249-8dec-1cf1fc6a9bfc"
		},
		{
			"name": "New Folder Copy 2",
			"item": [
				{
					"name": "Admin_login_With_valid_Endpoint Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0f80eff-ad62-4f09-b844-d07c880a9f8b",
								"exec": [
									"// var resp = pm.response.json();\r",
									"// pm.collectionVariables.set(\"Admin_Token\", resp.token);\r",
									"\r",
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"loginUserEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"token\",\r",
									"    \"type\",\r",
									"    \"userId\",\r",
									"    \"loginUserEmail\",\r",
									"    \"roles\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response contsins valid schema data\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"if (pm.response.code === 200) {\r",
									"    pm.environment.set(\"Admin_Token\", pm.response.json().token);\r",
									"   pm.execution.setNextRequest(\"CreateDietician \");\r",
									"} "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f69b24d9-269d-4fac-a4d7-702e2f5ce64d",
								"exec": [
									"// if (pm.info.iteration !== 0) { \r",
									"//       pm.execution.skipRequest();\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f199cf3a-40f6-4893-8873-2a2a1a1ecdce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"{{AdminPsw}}\",\r\n    \"userLoginEmail\": \"{{AdminEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/login"
					},
					"response": []
				},
				{
					"name": "CreateDietician",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4ca442d-8e35-488a-8175-1537189fce0d",
								"exec": [
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"//validate mandatory fields are not empty\r",
									"pm.test(\"First name is not empty\", function () {\r",
									"    pm.expect(jsonData.Firstname).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"Last name is not empty\", function () {\r",
									"    pm.expect(jsonData.Lastname).to.not.be.empty;\r",
									"});\r",
									"pm.test(\"Email is not empty\",function(){\r",
									"    pm.expect(jsonData.Email).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"ContactNumber is not empty\",function(){\r",
									"    pm.expect(jsonData.ContactNumber).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"DateOfBirth is not empty\",function(){\r",
									"    pm.expect(jsonData.DateOfBirth).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"Hospital name is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalName).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"HospitalStreet is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalStreet).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"City is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalCity).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"PinCode is not empty\",function(){\r",
									"    pm.expect(jsonData.HospitalPinCode).to.be.not.empty;\r",
									"});\r",
									"pm.test(\"Education is not empty\",function(){\r",
									"    pm.expect(jsonData.Education).to.be.not.empty;\r",
									"});\r",
									"  \r",
									"const responseCode = pm.response.code;\r",
									"const dieticianStatusCode = pm.iterationData.get(\"Dieiticanstatuscode\");\r",
									"\r",
									"if (responseCode === parseInt(dieticianStatusCode)) {\r",
									"    pm.collectionVariables.set(\"dieticianId\", pm.response.json().id);\r",
									"    pm.collectionVariables.set(\"dieticianPsw\", pm.response.json().password);\r",
									"    pm.collectionVariables.set(\"dieticianEmail\", pm.response.json().Email);\r",
									"    pm.execution.setNextRequest(\"GetallDietcianinfo\");\r",
									"    } else {\r",
									"        pm.execution.setNextRequest(\"CreateDietician\");\r",
									"    }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5b4459cc-18af-4817-b3fa-cb0d2835621f",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "784f3e73-062c-4319-a9b9-c6690212c620",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"ContactNumber\": \"{{contactnumber}}\",\r\n  \"DateOfBirth\": \"{{Dateofbirth}}\",\r\n  \"Education\": \"{{education}}\",\r\n  \"Email\": \"{{email}}\",\r\n  \"Firstname\": \"{{firstname}}\",\r\n  \"HospitalCity\": \"{{hospitalcity}}\",\r\n  \"HospitalName\": \"{{hospitalname}}\",\r\n  \"HospitalPincode\": \"{{hospitalpincode}}\",\r\n  \"HospitalStreet\": \"{{hospitalstreet}}\",\r\n  \"Lastname\": \"{{lastname}}\"\r\n \r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/dietician"
					},
					"response": []
				},
				{
					"name": "GetallDietcianinfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f5152cc-c416-4357-b128-e61b9666bb92",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"Firstname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"Lastname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ContactNumber\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"DateOfBirth\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"Email\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"Firstname\",\r",
									"        \"Lastname\",\r",
									"        \"ContactNumber\",\r",
									"        \"DateOfBirth\",\r",
									"        \"Email\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"Firstname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"Lastname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ContactNumber\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"DateOfBirth\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"Email\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"HospitalName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"HospitalStreet\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"HospitalCity\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"HospitalPincode\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"Education\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"Firstname\",\r",
									"        \"Lastname\",\r",
									"        \"ContactNumber\",\r",
									"        \"DateOfBirth\",\r",
									"        \"Email\",\r",
									"        \"HospitalName\",\r",
									"        \"HospitalStreet\",\r",
									"        \"HospitalCity\",\r",
									"        \"HospitalPincode\",\r",
									"        \"Education\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response contains valid schema data\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.execution.setNextRequest(\"Put Dietician\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d81bffd2-6805-4e28-936d-0e29a1d3fda5",
								"exec": [
									"// if (!(pm.collectionVariables.get(\"Dieiticanstatuscode\")== 201 && (pm.iterationData.get(\"Request\") == \"CreateUser\")))\r",
									"//     {\r",
									"//     pm.execution.skipRequest();\r",
									"//     }\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "505223f2-ed48-43bc-b86d-7a4e7e960a36",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/dietician"
					},
					"response": []
				},
				{
					"name": "UpdateDietician",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0bc97771-a44d-41e6-8223-3230175e1671",
								"exec": [
									" //pm.collectionVariables.set(\"statuscode\", pm.iterationData.get('statuscode'));\r",
									"// let statuscode1 = pm.collectionVariables.get(\"statuscode\");\r",
									"// console.log(statuscode1);\r",
									"\r",
									"// if (pm.iterationData.get(\"Request\") !== 'UpdateRequest') {\r",
									"//     pm.execution.skipRequest();\r",
									"// }\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9930ae85-9889-442f-8edf-db5e33873f0f",
								"exec": [
									"const responseCode = pm.response.code;\r",
									"const updateStatusCode = pm.iterationData.get(\"Dieiticanstatuscode\");\r",
									"\r",
									"if (responseCode === parseInt(updateStatusCode)) {\r",
									"        pm.execution.setNextRequest(\"Get_Dietcian_infoBy_ValidID \");\r",
									"    } else {\r",
									"    pm.execution.setNextRequest(\"UpdateDietician\");\r",
									"\r",
									"    }\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d779e7b3-46b6-4924-9163-0fec8ef3d8f8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n  \"ContactNumber\": \"{{contactnumber}}\",\r\n  \"DateOfBirth\": \"{{Dateofbirth}}\",\r\n  \"Education\": \"{{education}}\",\r\n  \"Email\": \"{{email}}\",\r\n  \"Firstname\": \"{{firstname}}\",\r\n  \"HospitalCity\":\" {{hospitalcity}}\",\r\n  \"HospitalName\": \"{{hospitalname}}\",\r\n  \"HospitalPincode\": \"{{hospitalpincode}}\",\r\n  \"HospitalStreet\":\"{{hospitalstreet}}\",\r\n  \"Lastname\": \"{{lastname}}\"\r\n \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_URL}}/dietician/:id",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"dietician",
								":id"
							],
							"variable": [
								{
									"id": "3e34017f-5951-44a0-bac1-996f0a834af2",
									"key": "id",
									"value": "{{dieticianId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get_Dietcian_infoBy_ValidID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "788fbcac-15be-493b-a37c-6ba5611fac5b",
								"exec": [
									"// Updated assertion to compare response value as a string\r",
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"const schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Firstname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Lastname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ContactNumber\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"DateOfBirth\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"HospitalName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"HospitalStreet\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"HospitalCity\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"HospitalPincode\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Education\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"Firstname\",\r",
									"    \"Lastname\",\r",
									"    \"ContactNumber\",\r",
									"    \"DateOfBirth\",\r",
									"    \"Email\",\r",
									"    \"HospitalName\",\r",
									"    \"HospitalStreet\",\r",
									"    \"HospitalCity\",\r",
									"    \"HospitalPincode\",\r",
									"    \"Education\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response contains valid schema data\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"pm.execution.setNextRequest(\"Dietician_ogin\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fe8f79f1-f33d-4768-a435-040f23a6caa0",
								"exec": [
									"// console.log(pm.info.iteration, pm.info.iterationCount)\r",
									"// if ( pm.info.iteration < pm.info.iterationCount - 1) {\r",
									"//     pm.execution.skipRequest();\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0bc1a171-cb5f-49f8-8192-ccb8fb05b814",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/dietician/{{dieticianId}}"
					},
					"response": []
				},
				{
					"name": "Dietician_login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0f80eff-ad62-4f09-b844-d07c880a9f8b",
								"exec": [
									"// let resp = pm.response.json();\r",
									"// pm.collectionVariables.set(\"Dietician_Token\", resp.token);\r",
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.resp.to.have.status(200);\r",
									"// });\r",
									"// var jsonData = JSON.parse(pm.response.text());\r",
									"// pm.collectionVariables.set(\"Dietician_token\", jsonData.token);\r",
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"loginUserEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"token\",\r",
									"    \"type\",\r",
									"    \"userId\",\r",
									"    \"loginUserEmail\",\r",
									"    \"roles\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response contains valid schema data\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.collectionVariables.set(\"Dietician_token\", pm.response.json().token);\r",
									"    pm.execution.setNextRequest(\"create_Patient\");\r",
									"} else {\r",
									"    pm.execution.setNextRequest(null); // Stop the request chain if the login fails\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6237db0f-0e85-4bd1-b186-f4b323ed46cf",
								"exec": [
									"// console.log(pm.info.iteration, pm.info.iterationCount)\r",
									"// if ( pm.info.iteration < pm.info.iterationCount - 1) {\r",
									"//     pm.execution.skipRequest();\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b5766285-a97e-4a60-9784-25a470e512bb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"{{dieticianPsw}}\",\r\n    \"userLoginEmail\": \"{{dieticianEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/login"
					},
					"response": []
				},
				{
					"name": "create_Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9278e75e-9340-4fff-b6c3-27740f54607e",
								"exec": [
									"var schema = ",
									"{",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"patientId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"FirstName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"LastName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"ContactNumber\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Email\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Allergy\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"FoodPreference\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"CuisineCategory\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"FileMorbidity\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"string\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"HbA1c\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"Average Glucose\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"HbA1c\",",
									"            \"Average Glucose\"",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"string\"",
									"      ]",
									"    },",
									"    \"FileMorbidityCondition\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"string\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"string\"",
									"      ]",
									"    },",
									"    \"DateOfBirth\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"DieticianId\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"Vitals\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"string\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"Weight\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"Height\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"Temperature\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"SP\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"DP\": {",
									"              \"type\": \"number\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"Weight\",",
									"            \"Height\",",
									"            \"Temperature\",",
									"            \"SP\",",
									"            \"DP\"",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"string\"",
									"      ]",
									"    },",
									"    \"LastVisitDate\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"patientId\",",
									"    \"FirstName\",",
									"    \"LastName\",",
									"    \"ContactNumber\",",
									"    \"Email\",",
									"    \"Allergy\",",
									"    \"FoodPreference\",",
									"    \"CuisineCategory\",",
									"    \"FileMorbidity\",",
									"    \"FileMorbidityCondition\",",
									"    \"DateOfBirth\",",
									"    \"DieticianId\",",
									"    \"Vitals\",",
									"    \"LastVisitDate\"",
									"  ]",
									"}",
									"",
									"pm.test(\"Response contsins valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"var response = pm.response.json();",
									"",
									"// Extract the patient ID and email",
									"var patientId = response.patientId;",
									"var patientEmail = response.Email;",
									"",
									"// if (pm.response.code === 201) {",
									"//     // Set collection variables for later use",
									"//     pm.collectionVariables.set(\"patientId\", patientId);",
									"//     pm.collectionVariables.set(\"PEmail\", patientEmail);",
									"// }",
									"// pm.test(\"Status code\", function () {",
									"//     pm.response.to.have.status(pm.collectionVariables.get(\"statuscode\"));",
									"// });",
									"",
									"const responseCode = pm.response.code;",
									"const patientStatusCode = pm.iterationData.get(\"statuscode\");",
									"",
									"if (responseCode === parseInt(patientStatusCode)) {",
									"     pm.collectionVariables.set(\"patientId\", patientId);",
									"    pm.collectionVariables.set(\"PEmail\", patientEmail);",
									"    pm.execution.setNextRequest(GetAllPatients ); ",
									"    } else {",
									"        pm.execution.setNextRequest(\"create_Patient\");",
									"   ",
									"",
									"// Tests to validate response data",
									"pm.test(\"First name is not empty\", function () {",
									"    pm.expect(response.FirstName).to.not.be.empty;",
									"});",
									"pm.test(\"Last name is not empty\", function () {",
									"    pm.expect(response.LastName).to.not.be.empty;",
									"});",
									"pm.test(\"Email is not empty\", function () {",
									"    pm.expect(response.Email).to.not.be.empty;",
									"});",
									"pm.test(\"ContactNumber is not empty\", function () {",
									"    pm.expect(response.ContactNumber).to.not.be.empty;",
									"});",
									"pm.test(\"DateOfBirth is not empty\", function () {",
									"    pm.expect(response.DateOfBirth).to.not.be.empty;",
									"});",
									"pm.test(\"Allergies is not empty\", function () {",
									"    pm.expect(response.Allergy).to.not.be.empty;",
									"});",
									"pm.test(\"CuisineCategory is not empty\", function () {",
									"    pm.expect(response.CuisineCategory).to.not.be.empty;",
									"});",
									"",
									"// Parse the response JSON again for file morbidity",
									"let res = pm.response.json();",
									"",
									"// Extract the fileId from the FileMorbidity object",
									"let fileId = Object.keys(res.FileMorbidity)[0];",
									"",
									"// Save the fileId to a collection variable",
									"pm.collectionVariables.set(\"fileId\", fileId);",
									"",
									"// Optionally, log the fileId to verify",
									"console.log(\"fileId saved to collection variable: \", fileId);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27cd307c-b49b-4959-8cf1-5539bdd1082d",
								"exec": [
									"// if (pm.iterationData.get(\"Request\") !== 'CreatePatient') {\r",
									"//     pm.execution.skipRequest();\r",
									"// }\r",
									"\r",
									"// pm.collectionVariables.set(\"statuscode\", pm.iterationData.get('statuscode'));\r",
									"// const dieticianToken = pm.collectionVariables.get(\"Dietician_token\");\r",
									"// pm.request.headers.add({\r",
									"//     key: \"Authorization\",\r",
									"//     value: `Bearer ${dieticianToken}`\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "17a9acda-ed43-4f28-bd69-2e71981987bf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"{{Patient_Fname}}\",\n\"LastName\": \"{{Patient_Lname}}\",\n\"ContactNumber\": \"{{Patient_ContactNo}}\",\n\"Email\": \"{{Patient_emailId}}\",\n\"Allergy\": \"{{allergy}}\",\n\"FoodPreference\": \"{{FoodPref}}\",\n\"CuisineCategory\":\"{{Cuisine}}\",\n\"DateOfBirth\": \"{{Patient_DOB}}\"\n}"
								},
								{
									"key": "file",
									"type": "file",
									"src": "5KoNrTaU6/HyperThyroid_Report_final.pdf"
								}
							]
						},
						"url": "{{base_URL}}/patient"
					},
					"response": [
						{
							"id": "79409d71-3cb6-4156-a4ff-2172673dcccf",
							"name": "New Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"type": "text",
											"value": "{ \"FirstName\": \"h\",\n\"LastName\": \"d\",\n\"ContactNumber\": \"1110000000\",\n\"Email\": \"S124@acbd.com\",\n\"Allergy\": \"Soy\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1988-07-05\"}"
										},
										{
											"key": "file",
											"type": "file",
											"src": "9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
										}
									]
								},
								"url": "{{base_URL}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 04:14:23 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"patientId\": 472,\n    \"FirstName\": \"h\",\n    \"LastName\": \"d\",\n    \"ContactNumber\": \"1110000000\",\n    \"Email\": \"S124@acbd.com\",\n    \"Allergy\": \"Soy\",\n    \"FoodPreference\": \"jain\",\n    \"CuisineCategory\": \"Indian\",\n    \"FileMorbidity\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66adae9f4717cf471aaad21d\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1988-07-05\",\n    \"DieticianId\": 871,\n    \"Vitals\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-03T04:14:23.627+00:00\"\n}"
						},
						{
							"id": "23bfe569-175c-411e-8296-817c5d373715",
							"name": "New Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"type": "text",
											"value": "{ \"FirstName\": \"h\",\n\"LastName\": \"d\",\n\"ContactNumber\": \"1110000000\",\n\"Email\": \"S124@acbd.com\",\n\"Allergy\": \"Soy\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1988-07-05\"}"
										},
										{
											"key": "file",
											"type": "file",
											"src": "9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
										}
									]
								},
								"url": "{{base_URL}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 04:14:23 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"patientId\": 472,\n    \"FirstName\": \"h\",\n    \"LastName\": \"d\",\n    \"ContactNumber\": \"1110000000\",\n    \"Email\": \"S124@acbd.com\",\n    \"Allergy\": \"Soy\",\n    \"FoodPreference\": \"jain\",\n    \"CuisineCategory\": \"Indian\",\n    \"FileMorbidity\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66adae9f4717cf471aaad21d\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1988-07-05\",\n    \"DieticianId\": 871,\n    \"Vitals\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-03T04:14:23.627+00:00\"\n}"
						}
					]
				},
				{
					"name": "GetAllPatients",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "236a4724-1b09-45be-b81c-61b68ac3a2c6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Check if the response time is less than 500ms",
									"// pm.test(\"Response time is less than 500ms\", function () {",
									"//     pm.expect(pm.response.responseTime).to.be.below(500);",
									"// });",
									"// var schema={",
									"  ",
									"//   \"type\": \"object\",",
									"//   \"properties\": {",
									"//     \"patientId\": {",
									"//       \"type\": \"number\"",
									"//     },",
									"//     \"FirstName\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"LastName\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"ContactNumber\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"Email\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"Allergy\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"FoodPreference\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"CuisineCategory\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"DateOfBirth\": {",
									"//       \"type\": \"string\"",
									"//     },",
									"//     \"DieticianId\": {",
									"//       \"type\": \"number\"",
									"//     }",
									"//   },",
									"//   \"required\": [",
									"//     \"patientId\",",
									"//     \"FirstName\",",
									"//     \"LastName\",",
									"//     \"ContactNumber\",",
									"//     \"Email\",",
									"//     \"Allergy\",",
									"//     \"FoodPreference\",",
									"//     \"CuisineCategory\",",
									"//     \"DateOfBirth\",",
									"//     \"DieticianId\"",
									"//   ]",
									"// }",
									"// pm.test(\"Response contsins valid schema data\", function () {",
									"//     pm.response.to.have.jsonSchema(schema);",
									"// });",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "98fa6054-68ad-43db-b43d-0e844ee12c67",
								"exec": [
									"// if (!(pm.collectionVariables.get(\"statuscode\")== 201 && (pm.iterationData.get(\"Request\") == \"CreatePatient\")))\r",
									"//     {\r",
									"//     pm.execution.skipRequest();\r",
									"//     }\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a1f5170f-1918-44e7-bfbe-d5e6d76f6a8e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/patient"
					},
					"response": [
						{
							"id": "663300ef-cf20-4cf1-b852-443c1686eec2",
							"name": "GetAllPatients",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{base_URL}}/patient"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722658260&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=XeVGK79cmbhC0rPJ%2Fpt9TNzVXVeLOy60cKuH%2FFX%2FLOg%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722658260&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=XeVGK79cmbhC0rPJ%2Fpt9TNzVXVeLOy60cKuH%2FFX%2FLOg%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 04:11:00 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n    {\n        \"patientId\": 468,\n        \"FirstName\": \"h\",\n        \"LastName\": \"d\",\n        \"ContactNumber\": \"1000000000\",\n        \"Email\": \"S124@acbd.com\",\n        \"Allergy\": \"Soy\",\n        \"FoodPreference\": \"jain\",\n        \"CuisineCategory\": \"Indian\",\n        \"FileMorbidity\": {\n            \"66ada9f04717cf471aaad20c\": {\n                \"HbA1c\": \"6.5 %\",\n                \"Average Glucose\": \"131.0 mg/dl\"\n            }\n        },\n        \"FileMorbidityCondition\": {\n            \"66ada9f04717cf471aaad20c\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n        },\n        \"DateOfBirth\": \"1988-07-08\",\n        \"DieticianId\": 871,\n        \"Vitals\": {\n            \"66ada9f04717cf471aaad20c\": {\n                \"Weight\": 0,\n                \"Height\": 0,\n                \"Temperature\": 0,\n                \"SP\": 0,\n                \"DP\": 0\n            }\n        },\n        \"LastVisitDate\": \"2024-08-03T03:54:24.117+00:00\"\n    }\n]"
						}
					]
				},
				{
					"name": "update_Patient Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9278e75e-9340-4fff-b6c3-27740f54607e",
								"exec": [
									"var response = pm.response.json();",
									"",
									"// Extract the patient ID and email",
									"var patientId = response.patientId;",
									"var patientEmail = response.Email;",
									"",
									"if (pm.response.code === 201) {",
									"    // Set collection variables for later use",
									"    pm.collectionVariables.set(\"patientId\", patientId);",
									"    pm.collectionVariables.set(\"PEmail\", patientEmail);",
									"}",
									"",
									"// Tests to validate response data",
									"pm.test(\"First name is not empty\", function () {",
									"    pm.expect(response.FirstName).to.not.be.empty;",
									"});",
									"pm.test(\"Last name is not empty\", function () {",
									"    pm.expect(response.LastName).to.not.be.empty;",
									"});",
									"pm.test(\"Email is not empty\", function () {",
									"    pm.expect(response.Email).to.not.be.empty;",
									"});",
									"pm.test(\"ContactNumber is not empty\", function () {",
									"    pm.expect(response.ContactNumber).to.not.be.empty;",
									"});",
									"pm.test(\"DateOfBirth is not empty\", function () {",
									"    pm.expect(response.DateOfBirth).to.not.be.empty;",
									"});",
									"pm.test(\"Allergies is not empty\", function () {",
									"    pm.expect(response.Allergy).to.not.be.empty;",
									"});",
									"pm.test(\"CuisineCategory is not empty\", function () {",
									"    pm.expect(response.CuisineCategory).to.not.be.empty;",
									"});",
									"",
									"// Parse the response JSON again for file morbidity",
									"let res = pm.response.json();",
									"",
									"// Extract the fileId from the FileMorbidity object",
									"let fileId = Object.keys(res.FileMorbidity)[0];",
									"",
									"// Save the fileId to a collection variable",
									"pm.collectionVariables.set(\"fileId\", fileId);",
									"",
									"// Optionally, log the fileId to verify",
									"console.log(\"fileId saved to collection variable: \", fileId);",
									"",
									"",
									"var schema = ",
									"  {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"patientId\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"FirstName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"LastName\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"ContactNumber\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Email\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Allergy\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"FoodPreference\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"CuisineCategory\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"FileMorbidity\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"66b1493c2e7ba525786166e5\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"T3\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"T4\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"TSH\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"T3\",",
									"            \"T4\",",
									"            \"TSH\"",
									"          ]",
									"        },",
									"        \"66b1493c2e7ba525786166e9\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"HbA1c\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"Average Glucose\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"HbA1c\",",
									"            \"Average Glucose\"",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"66b1493c2e7ba525786166e5\",",
									"        \"66b1493c2e7ba525786166e9\"",
									"      ]",
									"    },",
									"    \"FileMorbidityCondition\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"66b1493c2e7ba525786166e5\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"66b1493c2e7ba525786166e9\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"66b1493c2e7ba525786166e5\",",
									"        \"66b1493c2e7ba525786166e9\"",
									"      ]",
									"    },",
									"    \"DateOfBirth\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"DieticianId\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"Vitals\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"66b1493c2e7ba525786166e5\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"Weight\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"Height\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"Temperature\": {",
									"              \"type\": \"number\"",
									"            },",
									"            \"SP\": {",
									"              \"type\": \"integer\"",
									"            },",
									"            \"DP\": {",
									"              \"type\": \"integer\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"Weight\",",
									"            \"Height\",",
									"            \"Temperature\",",
									"            \"SP\",",
									"            \"DP\"",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"66b1493c2e7ba525786166e5\"",
									"      ]",
									"    },",
									"    \"LastVisitDate\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"patientId\",",
									"    \"FirstName\",",
									"    \"LastName\",",
									"    \"ContactNumber\",",
									"    \"Email\",",
									"    \"Allergy\",",
									"    \"FoodPreference\",",
									"    \"CuisineCategory\",",
									"    \"FileMorbidity\",",
									"    \"FileMorbidityCondition\",",
									"    \"DateOfBirth\",",
									"    \"DieticianId\",",
									"    \"Vitals\",",
									"    \"LastVisitDate\"",
									"  ]",
									"}",
									"",
									"pm.test(\"Response contsins valid schema data\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27cd307c-b49b-4959-8cf1-5539bdd1082d",
								"exec": [
									"// if (pm.iterationData.get(\"Request\") !== 'UpdatePatient') {\r",
									"//     pm.execution.skipRequest();\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "62d4ecd1-71e7-458a-ba01-6ed6e193753a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"{{Patient_Fname}}\",\n\"LastName\": \"{{Patient_Lname}}\",\n\"ContactNumber\": \"{{Patient_ContactNo}}\",\n\"Email\": \"{{Patient_emailId}}\",\n\"Allergy\": \"{{allergy}}\",\n\"FoodPreference\": \"{{FoodPref}}\",\n\"CuisineCategory\":\"{{Cuisine}}\",\n\"DateOfBirth\": \"{{Patient_DOB}}\"\n}"
								},
								{
									"key": "file",
									"type": "file",
									"src": "9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
								}
							]
						},
						"url": "{{base_URL}}/patient/{{patientId}}"
					},
					"response": [
						{
							"id": "de2ddad3-5558-4059-9d4b-55a9fc9eac28",
							"name": "New Request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "patientInfo",
											"type": "text",
											"value": "{ \"FirstName\": \"h\",\n\"LastName\": \"d\",\n\"ContactNumber\": \"1110000000\",\n\"Email\": \"S124@acbd.com\",\n\"Allergy\": \"Soy\",\n\"FoodPreference\": \"jain\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1988-07-05\"}"
										},
										{
											"key": "file",
											"type": "file",
											"src": "9Xsx4k7uG/Diabetic and Hemogram Test_Thyrocare lab.pdf (1).pdf"
										}
									]
								},
								"url": "{{base_URL}}/patient"
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "Cowboy"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1722658463&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=cy3qZMLxNz0Ecl%2BSb22A1a7HlV82viMWuUu5xAmRVm0%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Method"
								},
								{
									"key": "Vary",
									"value": "Access-Control-Request-Headers"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000 ; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 03 Aug 2024 04:14:23 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"patientId\": 472,\n    \"FirstName\": \"h\",\n    \"LastName\": \"d\",\n    \"ContactNumber\": \"1110000000\",\n    \"Email\": \"S124@acbd.com\",\n    \"Allergy\": \"Soy\",\n    \"FoodPreference\": \"jain\",\n    \"CuisineCategory\": \"Indian\",\n    \"FileMorbidity\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"HbA1c\": \"6.5 %\",\n            \"Average Glucose\": \"131.0 mg/dl\"\n        }\n    },\n    \"FileMorbidityCondition\": {\n        \"66adae9f4717cf471aaad21d\": \"Prediabetic \\nBlood Pressure: Hypotension \\n\"\n    },\n    \"DateOfBirth\": \"1988-07-05\",\n    \"DieticianId\": 871,\n    \"Vitals\": {\n        \"66adae9f4717cf471aaad21d\": {\n            \"Weight\": 0,\n            \"Height\": 0,\n            \"Temperature\": 0,\n            \"SP\": 0,\n            \"DP\": 0\n        }\n    },\n    \"LastVisitDate\": \"2024-08-03T04:14:23.627+00:00\"\n}"
						}
					]
				},
				{
					"name": "UpdateAddNewReprtsWithVital Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da827469-56e0-438e-83dd-5441a9581a42",
								"exec": [
									"const response = pm.response.json();",
									"",
									"// // Extract the program name and program status",
									" const patientId = response.patientId;",
									"",
									" if (pm.response.code === 200) {",
									"   // Set collection variables for later use",
									"pm.collectionVariables.set(\"patientId\", patientId);",
									" }",
									" console.log(\"patientId\", patientId);",
									"//Before storing collection variable validating",
									"pm.test(\"patientId is stored as a collection variable\", function () {",
									"    pm.expect(pm.collectionVariables.get(\"patientId\")).to.eql(patientId);",
									"});",
									"pm.test(\"First name is not empty\", function () {",
									"    pm.expect(response.FirstName).to.not.be.empty;",
									"});",
									"pm.test(\"Last name is not empty\", function () {",
									"    pm.expect(response.LastName).to.not.be.empty;",
									"});",
									"pm.test(\"Email is not empty\",function(){",
									"    pm.expect(response.Email).to.be.not.empty;",
									"});",
									"pm.test(\"ContactNumber is not empty\",function(){",
									"    pm.expect(response.ContactNumber).to.be.not.empty;",
									"});",
									"pm.test(\"DateOfBirth is not empty\",function(){",
									"    pm.expect(response.DateOfBirth).to.be.not.empty;",
									"});",
									"pm.test(\"Allergies is not empty\",function(){",
									"    pm.expect(response.Allergy).to.be.not.empty;",
									"});",
									"",
									"pm.test(\"CuisineCategory is not empty\",function(){",
									"    pm.expect(response.CuisineCategory).to.be.not.empty;",
									"});",
									"// Parse the response JSON",
									"let res = pm.response.json();",
									"",
									"// Extract the fileId",
									"let fileId = Object.keys(res.FileMorbidity)[0];",
									"",
									"// Save the fileId to a collection variable",
									"pm.collectionVariables.set(\"fileId\", fileId);",
									"",
									"// Optionally, log the fileId to verify",
									"console.log(\"fileId saved to collection variable: \", fileId);",
									"",
									"// Check if the response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Check if the response has a JSON content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									"",
									"// const schema = {",
									"//     \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"//     \"type\": \"object\",",
									"//     \"properties\": {",
									"//         \"patientId\": {",
									"//             \"type\": \"integer\"",
									"//         },",
									"//         \"FirstName\": {",
									"//             \"type\": \"string\"",
									"//         },",
									"//         \"LastName\": {",
									"//             \"type\": \"string\"",
									"//         },",
									"//         \"ContactNumber\": {",
									"//             \"type\": \"string\",",
									"//             \"pattern\": \"^\\\\d{10}$\"",
									"//         },",
									"//         \"Email\": {",
									"//             \"type\": \"string\",",
									"//             \"format\": \"email\"",
									"//         },",
									"//         \"Allergy\": {",
									"//             \"type\": \"string\"",
									"//         },",
									"//         \"FoodPreference\": {",
									"//             \"type\": \"string\"",
									"//         },",
									"//         \"CuisineCategory\": {",
									"//             \"type\": \"string\"",
									"//         },",
									"//         \"FileMorbidity\": {",
									"//             \"type\": \"object\",",
									"//             \"patternProperties\": {",
									"//                 \"^[a-fA-F0-9]{24}$\": {",
									"//                     \"type\": \"object\",",
									"//                     \"properties\": {",
									"//                         \"HbA1c\": {",
									"//                             \"type\": \"string\"",
									"//                         },",
									"//                         \"Average Glucose\": {",
									"//                             \"type\": \"string\"",
									"//                         }",
									"//                     },",
									"//                     \"required\": [\"HbA1c\", \"Average Glucose\"]",
									"//                 }",
									"//             }",
									"//         },",
									"//         \"FileMorbidityCondition\": {",
									"//             \"type\": \"object\",",
									"//             \"patternProperties\": {",
									"//                 \"^[a-fA-F0-9]{24}$\": {",
									"//                     \"type\": \"string\"",
									"//                 }",
									"//             }",
									"//         },",
									"//         \"DateOfBirth\": {",
									"//             \"type\": \"string\",",
									"//             \"format\": \"date\"",
									"//         },",
									"//         \"DieticianId\": {",
									"//             \"type\": \"integer\"",
									"//         },",
									"//         \"Vitals\": {",
									"//             \"type\": \"object\",",
									"//             \"patternProperties\": {",
									"//                 \"^[a-fA-F0-9]{24}$\": {",
									"//                     \"type\": \"object\",",
									"//                     \"properties\": {",
									"//                         \"Weight\": {",
									"//                             \"type\": \"number\"",
									"//                         },",
									"//                         \"Height\": {",
									"//                             \"type\": \"number\"",
									"//                         },",
									"//                         \"Temperature\": {",
									"//                             \"type\": \"number\"",
									"//                         },",
									"//                         \"SP\": {",
									"//                             \"type\": \"integer\"",
									"//                         },",
									"//                         \"DP\": {",
									"//                             \"type\": \"integer\"",
									"//                         }",
									"//                     },",
									"//                     \"required\": [\"Weight\", \"Height\", \"Temperature\", \"SP\", \"DP\"]",
									"//                 }",
									"//             }",
									"//         },",
									"//         \"LastVisitDate\": {",
									"//             \"type\": \"string\",",
									"//             \"format\": \"date-time\"",
									"//         }",
									"//     },",
									"//     \"required\": [\"patientId\", \"FirstName\", \"LastName\", \"ContactNumber\", \"Email\", \"Allergy\", \"FoodPreference\", \"CuisineCategory\", \"FileMorbidity\", \"FileMorbidityCondition\", \"DateOfBirth\", \"DieticianId\", \"Vitals\", \"LastVisitDate\"]",
									"// }",
									"// pm.test(\"Schema is valid\", function () {",
									"//     pm.response.to.have.jsonSchema(schema);",
									"// });",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1dd1efc3-2f62-4447-b311-245810b01955",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"setebcr\",\n\"LastName\": \"sdetyze\",\n\"ContactNumber\": \"9193656789\",\n\"Email\": \"asddetb1@gmail.com\",\n\"Allergy\": \"PECAN\",\n\"FoodPreference\": \"Vegan\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1985-12-14\"\n}\n"
								},
								{
									"key": "Reports",
									"type": "file",
									"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
									"filesNotInWorkingDirectory": [
										"_DuXivL8A/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
									],
									"src": "_DuXivL8A/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "vitals",
									"value": "{\n       “Weight“ : 45.0,\n       “Height” : 5.5,\n        “Temperature” : 99.0,\n        “SP” : 4,\n        “DP” : 5\n \n             \t}\n",
									"type": "text"
								}
							]
						},
						"url": "{{base_URL}}/patient/newReports/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "UpdateAddNewReprtswithoutVital",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da827469-56e0-438e-83dd-5441a9581a42",
								"exec": [
									"const response = pm.response.json();",
									"",
									"// // Extract the program name and program status",
									" const patientId = response.patientId;",
									"",
									" if (pm.response.code === 200) {",
									"   // Set collection variables for later use",
									"pm.collectionVariables.set(\"patientId\", patientId);",
									" }",
									" console.log(\"patientId\", patientId);",
									"//Before storing collection variable validating",
									"pm.test(\"patientId is stored as a collection variable\", function () {",
									"    pm.expect(pm.collectionVariables.get(\"patientId\")).to.eql(patientId);",
									"});",
									"pm.test(\"First name is not empty\", function () {",
									"    pm.expect(jsonData.FirstName).to.not.be.empty;",
									"});",
									"pm.test(\"Last name is not empty\", function () {",
									"    pm.expect(jsonData.LastName).to.not.be.empty;",
									"});",
									"pm.test(\"Email is not empty\",function(){",
									"    pm.expect(jsonData.Email).to.be.not.empty;",
									"});",
									"pm.test(\"ContactNumber is not empty\",function(){",
									"    pm.expect(jsonData.ContactNumber).to.be.not.empty;",
									"});",
									"pm.test(\"DateOfBirth is not empty\",function(){",
									"    pm.expect(jsonData.DateOfBirth).to.be.not.empty;",
									"});",
									"pm.test(\"Allergies is not empty\",function(){",
									"    pm.expect(jsonData.Allergy).to.be.not.empty;",
									"});",
									"",
									"pm.test(\"CuisineCategory is not empty\",function(){",
									"    pm.expect(jsonData.CuisineCategory).to.be.not.empty;",
									"});",
									"// Parse the response JSON",
									"let res = pm.response.json();",
									"",
									"// Extract the fileId",
									"let fileId = Object.keys(res.FileMorbidity)[0];",
									"",
									"// Save the fileId to a collection variable",
									"pm.collectionVariables.set(\"fileId\", fileId);",
									"",
									"// Optionally, log the fileId to verify",
									"console.log(\"fileId saved to collection variable: \", fileId);",
									"",
									"// Check if the response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Check if the response has a JSON content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", /application/json);",
									"});",
									"",
									"const schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"patientId\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"FirstName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"LastName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"ContactNumber\": {",
									"            \"type\": \"string\",",
									"            \"pattern\": \"^\\\\d{10}$\"",
									"        },",
									"        \"Email\": {",
									"            \"type\": \"string\",",
									"            \"format\": \"email\"",
									"        },",
									"        \"Allergy\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"FoodPreference\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"CuisineCategory\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"FileMorbidity\": {",
									"            \"type\": \"object\",",
									"            \"patternProperties\": {",
									"                \"^[a-fA-F0-9]{24}$\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"HbA1c\": {",
									"                            \"type\": \"string\"",
									"                        },",
									"                        \"Average Glucose\": {",
									"                            \"type\": \"string\"",
									"                        }",
									"                    },",
									"                    \"required\": [\"HbA1c\", \"Average Glucose\"]",
									"                }",
									"            }",
									"        },",
									"        \"FileMorbidityCondition\": {",
									"            \"type\": \"object\",",
									"            \"patternProperties\": {",
									"                \"^[a-fA-F0-9]{24}$\": {",
									"                    \"type\": \"string\"",
									"                }",
									"            }",
									"        },",
									"        \"DateOfBirth\": {",
									"            \"type\": \"string\",",
									"            \"format\": \"date\"",
									"        },",
									"        \"DieticianId\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"Vitals\": {",
									"            \"type\": \"object\",",
									"            \"patternProperties\": {",
									"                \"^[a-fA-F0-9]{24}$\": {",
									"                    \"type\": \"object\",",
									"                    \"properties\": {",
									"                        \"Weight\": {",
									"                            \"type\": \"number\"",
									"                        },",
									"                        \"Height\": {",
									"                            \"type\": \"number\"",
									"                        },",
									"                        \"Temperature\": {",
									"                            \"type\": \"number\"",
									"                        },",
									"                        \"SP\": {",
									"                            \"type\": \"integer\"",
									"                        },",
									"                        \"DP\": {",
									"                            \"type\": \"integer\"",
									"                        }",
									"                    },",
									"                    \"required\": [\"Weight\", \"Height\", \"Temperature\", \"SP\", \"DP\"]",
									"                }",
									"            }",
									"        },",
									"        \"LastVisitDate\": {",
									"            \"type\": \"string\",",
									"            \"format\": \"date-time\"",
									"        }",
									"    },",
									"    \"required\": [\"patientId\", \"FirstName\", \"LastName\", \"ContactNumber\", \"Email\", \"Allergy\", \"FoodPreference\", \"CuisineCategory\", \"FileMorbidity\", \"FileMorbidityCondition\", \"DateOfBirth\", \"DieticianId\", \"Vitals\", \"LastVisitDate\"]",
									"}",
									"pm.test(\"Schema is valid\", function () {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "99a5de25-6914-4d1d-865c-eeba8f97e50d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"type": "text",
									"value": "{ \"FirstName\": \"{{fname}}\",\n\"LastName\": \"{{lname}}\",\n\"ContactNumber\": \"{{contactno}}\",\n\"Email\": \"{{pemail}}\",\n\"Allergy\": \"{{allergy}}\",\n\"FoodPreference\": \"{{foodpref}}\",\n\"CuisineCategory\":\"{{cuisine}}\",\n\"DateOfBirth\": \"{{dob}}\"\n}"
								},
								{
									"key": "Reports",
									"type": "file",
									"fileNotInWorkingDirectoryWarning": "This file isn't in your working directory. Teammates you share this request with won't be able to use this file. To make collaboration easier you can setup your working directory in Settings.",
									"filesNotInWorkingDirectory": [
										"_DuXivL8A/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
									],
									"src": "_DuXivL8A/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								}
							]
						},
						"url": "{{base_URL}}/patient/newReports/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "GetOperatioRetrievePatientfilebyFileId Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e8e1614-eb68-476c-9e46-7fbbcff663c5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Check if the response has a JSON content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", /application/json);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "18f35a46-9c66-4ccd-b567-2c79a99718df",
								"exec": [
									"console.log(pm.info.iteration, pm.info.iterationCount)\r",
									"if ( pm.info.iteration < pm.info.iterationCount - 1) {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3f1a4c9f-ffad-4de6-8b59-a73d248dad1b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/patient/testReports/viewFile/{{fileId}}"
					},
					"response": []
				},
				{
					"name": "GetPatientsMorbidityDetails Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e55a389-9817-4d76-9659-104ef45848b6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Check if the response has a JSON content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", /application/json);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e62f405-b007-4ecf-8294-bcc622ffde43",
								"exec": [
									"console.log(pm.info.iteration, pm.info.iterationCount)\r",
									"if ( pm.info.iteration < pm.info.iterationCount - 1) {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e957a471-44fe-4f73-b01e-361f43667776",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/patient/testReports/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Fasting Glucose)_byDietecian Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55202cd-58c9-497b-a08d-cfc188b2d208",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"/*pm.test(\"Verify response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Morbidity properties validation\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach((item) => {",
									"        pm.expect(item.morbidityId).to.be.a('number').and.to.be.at.least(0, \"morbidityId should be a non-negative integer\");",
									"        pm.expect(item.morbidityTestId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestId should be a non-empty string\");",
									"        pm.expect(item.morbidityTestName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestName should be a non-empty string\");",
									"        pm.expect(item.morbidityTestUnit).to.be.a('string').and.to.have.lengthOf.at.least(1, \"morbidityTestUnit should be a non-empty string\");",
									"        pm.expect(item.morbidityMarkerMinVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMinVal should be a non-negative integer\");",
									"        pm.expect(item.morbidityMarkerMaxVal).to.be.a('number').and.to.be.at.least(0, \"morbidityMarkerMaxVal should be a non-negative integer\");",
									"    });",
									"});*/",
									"",
									"",
									"",
									"",
									"pm.test(\"Validate TestName value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityTestName).to.eql(\"Fasting Glucose\");",
									"    pm.expect(response[0].morbidityTestName).to.be.a(\"String\");",
									"})",
									"",
									"pm.test(\"Validate Min&Max value and datatype in response\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0].morbidityMarkerMinVal).to.eql(100);",
									"    pm.expect(response[0].morbidityMarkerMinVal).to.be.a(\"number\");",
									"    pm.expect(response[0].morbidityMarkerMaxVal).to.eql(125);",
									"    pm.expect(response[0].morbidityMarkerMaxVal).to.be.a(\"number\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6e47c0ca-6c27-449e-b4be-dc1b26d534e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/Fasting Glucose"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Plasma Glucose)_byDietecian Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55202cd-58c9-497b-a08d-cfc188b2d208",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5fd4e86a-56cc-4718-ba1a-34ec2da42a54",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/Plasma Glucose"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Average Glucose)_byDietecian Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55202cd-58c9-497b-a08d-cfc188b2d208",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "45e0e688-956f-4332-9e36-692df31bb02d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/Average Glucose"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Thyroid/TSH)_byDietecian Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55202cd-58c9-497b-a08d-cfc188b2d208",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e9bbe815-6b9c-4245-876a-2e7641fdab11",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/TSH"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Thyroid/T3)_byDietecian Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55202cd-58c9-497b-a08d-cfc188b2d208",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c8a113a3-8d41-40f7-9fc5-be142658ad21",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/T3"
					},
					"response": []
				},
				{
					"name": "Retrieve_Morbidity_Condition_by_Testname(Thyroid/T4)_byDietecian Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d55202cd-58c9-497b-a08d-cfc188b2d208",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "484fc4af-e69f-46ea-afcc-fbd9fce171d1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/morbidity/T4"
					},
					"response": []
				},
				{
					"name": "PatientLogin Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9358130-83db-438b-9666-63266689214a",
								"exec": [
									"let resp = pm.response.json();\r",
									"let Patient_token=resp.token;\r",
									"if (pm.response.code === 200 ) {\r",
									"   // Set collection variables for later use\r",
									"pm.collectionVariables.set(\"Patient_Token\", Patient_token);\r",
									" }\r",
									"//pm.collectionVariables.set(\"Patient_Token\", resp.token);\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.resp.to.have.status(200);\r",
									"});\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"loginUserEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"token\",\r",
									"    \"type\",\r",
									"    \"userId\",\r",
									"    \"loginUserEmail\",\r",
									"    \"roles\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Response contsins valid schema data\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7ab1ad30-61a6-4b9a-ad5f-99f7d44b0ae0",
								"exec": [
									"// if (pm.info.iteration !== 0) { \r",
									"//       pm.execution.skipRequest();\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "13c89cb9-0e05-405c-86bc-6895db66914e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"{{patientPsw}}\",\r\n    \"userLoginEmail\": \"{{Patientemail}}\"\r\n   \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_URL}}/login"
					},
					"response": []
				},
				{
					"name": "GetPatientfilebyFileId Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e8e1614-eb68-476c-9e46-7fbbcff663c5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Check if the response has a JSON content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", /application/json);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "18f35a46-9c66-4ccd-b567-2c79a99718df",
								"exec": [
									"console.log(pm.info.iteration, pm.info.iterationCount)\r",
									"if ( pm.info.iteration < pm.info.iterationCount - 1) {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "549360a6-8a4d-49fd-9745-742270fe6924",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/patient/testReports/viewFile/{{fileId}}"
					},
					"response": []
				},
				{
					"name": "GetPatientsMorbidityDetails Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e55a389-9817-4d76-9659-104ef45848b6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response time is less than 500ms",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"// Check if the response has a JSON content type",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", /application/json);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e62f405-b007-4ecf-8294-bcc622ffde43",
								"exec": [
									"console.log(pm.info.iteration, pm.info.iterationCount)\r",
									"if ( pm.info.iteration < pm.info.iterationCount - 1) {\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "217b7361-39fd-4ed5-89a6-06ff3041a2fd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Dietician_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/patient/testReports/{{patientId}}"
					},
					"response": []
				},
				{
					"name": "Delete_PatientById Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87dd2496-6e81-4716-ba83-e7dba4ee700d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6aef159b-84e6-42f2-87cc-66ff0de7d380",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f63b2449-41e8-47d6-8549-d9ddd58afd2b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{patientId}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_URL}}/patient/:id",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"patient",
								":id"
							],
							"variable": [
								{
									"id": "762f6af2-5d42-4c2b-b2b6-0a64ddf44023",
									"key": "id",
									"value": "1268"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeletedieticanByVldID Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9dab26ca-83a5-4d4c-ab96-04434d06a4fd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "3a14857e-5c7b-4da5-807e-48ea103414ea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_URL}}/dietician/:dietid",
							"host": [
								"{{base_URL}}"
							],
							"path": [
								"dietician",
								":dietid"
							],
							"variable": [
								{
									"id": "043ff041-6e80-457d-883e-c445d38e4e81",
									"key": "dietid",
									"value": "2170"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logoutwithvalidendpoint Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51d59360-0f02-4ba7-bd34-423ac0bd4457",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "bf3ef9cc-7a27-49a2-88e7-3ae23695eddb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{Admin_Token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{base_URL}}/logoutdietician"
					},
					"response": []
				}
			],
			"id": "45321ef6-6561-4ecb-af40-f823079fef24"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "231591ea-f060-4f75-b054-1f9d09dd4e75",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "aa18ad5f-44e7-4bdf-9950-099b9a526a84",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Admin_Token",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtNEBnbWFpbC5jb20iLCJpYXQiOjE3MjI3NDIzNDEsImV4cCI6MTcyMjc3MTE0MX0.ZcfdvI8GCgNBq6Ke1fHpIOK3UV1VJB8ZRmpsGmJK-MQl5lYdQ_2frr3EAzUURAVdEhlimxPevqZDwtqPMlltNQ"
		},
		{
			"key": "AdminEmail",
			"value": "Team4@gmail.com",
			"type": "string"
		},
		{
			"key": "AdminPsw",
			"value": "test",
			"type": "string"
		},
		{
			"key": "base_URL",
			"value": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dietician",
			"type": "string"
		},
		{
			"key": "dieticianId",
			"value": ""
		},
		{
			"key": "dieticianPsw",
			"value": ""
		},
		{
			"key": "dieticianEmail",
			"value": ""
		},
		{
			"key": "Dietician_token",
			"value": ""
		},
		{
			"key": "statuscode",
			"value": ""
		},
		{
			"key": "patientId",
			"value": ""
		},
		{
			"key": "PEmail",
			"value": ""
		},
		{
			"key": "fileId",
			"value": ""
		}
	]
}